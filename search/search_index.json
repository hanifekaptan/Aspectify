{"config":{"lang":["en","tr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Aspectify","text":"<p>Aspect-Based Sentiment Analysis (ABSA) Application</p> <p>Aspectify is a powerful application that performs aspect-based sentiment analysis on text and audio content using Google's Gemini AI models. It can analyze sentiment for different aspects within the same text, providing detailed insights into user opinions.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83c\udfaf Aspect-Based Analysis: Identifies and analyzes sentiment for different aspects within text</li> <li>\ud83c\udfa4 Audio Support: Transcribes audio files and analyzes sentiment</li> <li>\ud83c\udf0d Multi-language Support: Detects and analyzes content in multiple languages</li> <li>\ud83e\udd16 AI-Powered: Uses Google Gemini models for accurate sentiment analysis</li> <li>\ud83d\udcca Detailed Results: Provides polarity, confidence scores, and aspect-specific quotes</li> <li>\ud83d\udcdd Comprehensive Logging: Full application logging for debugging and monitoring</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>from app.agents.absa_agent import run_absa\n\n# Analyze text\nresult = await run_absa(\"The camera is great but battery life is poor\")\nprint(f\"Overall sentiment: {result.polarity}\")\nprint(f\"Confidence: {result.score}\")\nfor aspect in result.aspects:\n    print(f\"{aspect.aspect}: {aspect.sentiment} ({aspect.score})\")\n</code></pre>"},{"location":"#architecture","title":"Architecture","text":"<p>Aspectify follows a modular architecture with clear separation of concerns:</p> <ul> <li>Agents: High-level orchestration of analysis workflows</li> <li>AI Models: Integration with Google Gemini models</li> <li>Tools: Specialized analysis tools and utilities</li> <li>Logic: Core business logic for content processing</li> <li>Schemas: Data models and validation</li> <li>Core: Configuration and logging infrastructure</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Installation - Set up the development environment</li> <li>Configuration - Configure API keys and settings</li> <li>Quick Start - Run your first analysis</li> </ol>"},{"location":"#documentation","title":"Documentation","text":"<p>This documentation covers all aspects of the Aspectify application:</p> <ul> <li>Architecture: Understanding the system design</li> <li>API Reference: Detailed API documentation</li> <li>Development: Contributing and testing guidelines</li> <li>Deployment: Production deployment instructions</li> </ul>"},{"location":"#example-output","title":"Example Output","text":"<pre><code>{\n  \"id\": \"uuid-here\",\n  \"polarity\": \"neutral\",\n  \"score\": 0.5,\n  \"aspects\": [\n    {\n      \"aspect\": \"camera\",\n      \"sentiment\": \"positive\",\n      \"score\": 0.95,\n      \"quote\": \"camera is great\"\n    },\n    {\n      \"aspect\": \"battery\",\n      \"sentiment\": \"negative\", \n      \"score\": 0.98,\n      \"quote\": \"battery life is poor\"\n    }\n  ],\n  \"message\": \"ABSA completed successfully\",\n  \"text\": \"The camera is great but battery life is poor\"\n}\n</code></pre>"},{"location":"#support","title":"Support","text":"<p>For questions, issues, or contributions, please visit our GitHub repository.</p>"},{"location":"api/absa-agent/","title":"ABSA Agent API","text":"<p>The ABSA (Aspect-Based Sentiment Analysis) Agent is the main entry point for performing sentiment analysis on text and audio content.</p>"},{"location":"api/absa-agent/#overview","title":"Overview","text":"<p>The ABSA Agent orchestrates the entire analysis workflow, handling content type detection, transcription (for audio), language detection, and sentiment analysis.</p>"},{"location":"api/absa-agent/#main-function","title":"Main Function","text":""},{"location":"api/absa-agent/#run_absadata-str-absaresponse","title":"<code>run_absa(data: str) -&gt; ABSAResponse</code>","text":"<p>Performs aspect-based sentiment analysis on input text or audio file.</p>"},{"location":"api/absa-agent/#parameters","title":"Parameters","text":"Parameter Type Description <code>data</code> <code>str</code> Text content or path to audio file"},{"location":"api/absa-agent/#returns","title":"Returns","text":"<p>Returns an <code>ABSAResponse</code> object containing the analysis results.</p>"},{"location":"api/absa-agent/#raises","title":"Raises","text":"<ul> <li><code>ValueError</code>: If the text content is empty after processing</li> <li><code>FileNotFoundError</code>: If audio file path doesn't exist</li> <li><code>RuntimeError</code>: If audio transcription fails</li> </ul>"},{"location":"api/absa-agent/#usage-examples","title":"Usage Examples","text":""},{"location":"api/absa-agent/#text-analysis","title":"Text Analysis","text":"<pre><code>import asyncio\nfrom app.agents.absa_agent import run_absa\n\nasync def analyze_text():\n    text = \"The camera quality is excellent but the battery life is disappointing.\"\n    result = await run_absa(text)\n\n    print(f\"Overall sentiment: {result.polarity}\")\n    print(f\"Confidence: {result.score}\")\n\n    for aspect in result.aspects:\n        print(f\"{aspect.aspect}: {aspect.sentiment}\")\n\nasyncio.run(analyze_text())\n</code></pre>"},{"location":"api/absa-agent/#audio-analysis","title":"Audio Analysis","text":"<pre><code>import asyncio\nfrom app.agents.absa_agent import run_absa\n\nasync def analyze_audio():\n    audio_path = \"path/to/audio.wav\"\n    result = await run_absa(audio_path)\n\n    print(f\"Transcribed: {result.text}\")\n    print(f\"Sentiment: {result.polarity}\")\n\nasyncio.run(analyze_audio())\n</code></pre>"},{"location":"api/absa-agent/#workflow","title":"Workflow","text":"<p>The ABSA Agent follows this workflow:</p> <ol> <li>Content Type Detection: Determines if input is text or audio file</li> <li>Content Processing: </li> <li>For text: Uses input directly</li> <li>For audio: Transcribes to text using Whisper</li> <li>Language Detection: Identifies the language of the content</li> <li>Sentiment Analysis: Performs aspect-based analysis using Gemini</li> <li>Response Formatting: Structures results into <code>ABSAResponse</code> object</li> </ol>"},{"location":"api/absa-agent/#dependencies","title":"Dependencies","text":"<p>The ABSA Agent depends on several modules:</p> <ul> <li><code>app.logic.content_type_identifier</code>: Content type detection</li> <li><code>app.logic.transcriber</code>: Audio transcription</li> <li><code>app.logic.language_detector</code>: Language detection</li> <li><code>app.tools.absa_analyzer</code>: Core sentiment analysis</li> <li><code>app.schemas.response.absa_response</code>: Response models</li> </ul>"},{"location":"api/absa-agent/#error-handling","title":"Error Handling","text":""},{"location":"api/absa-agent/#input-validation","title":"Input Validation","text":"<pre><code># Empty text after processing\nif not text_content:\n    raise ValueError(\"The text content to be analyzed cannot be empty.\")\n</code></pre>"},{"location":"api/absa-agent/#audio-file-handling","title":"Audio File Handling","text":"<pre><code># File not found\nif not os.path.exists(audio_file_path):\n    raise FileNotFoundError(f\"Audio file not found: {audio_file_path}\")\n\n# Transcription error\ntry:\n    result = model.transcribe(audio_file_path)\n    return result[\"text\"]\nexcept Exception as e:\n    raise RuntimeError(f\"Audio transcription error: {e}\")\n</code></pre>"},{"location":"api/absa-agent/#performance-considerations","title":"Performance Considerations","text":""},{"location":"api/absa-agent/#async-operations","title":"Async Operations","text":"<p>All operations are asynchronous to prevent blocking:</p> <pre><code>async def run_absa(data: str) -&gt; ABSAResponse:\n    # Non-blocking operations\n    content_type = identify_content_type(data)\n    if is_audio_path:\n        text_content = transcribe_from_path(data)  # Can be slow\n    # ...\n</code></pre>"},{"location":"api/absa-agent/#rate-limiting","title":"Rate Limiting","text":"<p>The agent includes built-in delays to respect API rate limits:</p> <pre><code>await asyncio.sleep(2)  # 2-second delay between requests\n</code></pre>"},{"location":"api/absa-agent/#response-structure","title":"Response Structure","text":"<p>The agent returns an <code>ABSAResponse</code> object with the following structure:</p> <pre><code>class ABSAResponse:\n    id: str                    # Unique identifier (UUID)\n    polarity: str              # Overall sentiment\n    score: float               # Confidence score (0.0-1.0)\n    aspects: List[AspectAnalysisResponse]  # Individual aspects\n    message: str               # Status message\n    text: str                  # Original or transcribed text\n</code></pre>"},{"location":"api/absa-agent/#aspect-analysis","title":"Aspect Analysis","text":"<p>Each aspect in the response contains:</p> <pre><code>class AspectAnalysisResponse:\n    aspect: str                # Aspect name\n    sentiment: str             # Aspect sentiment\n    score: float               # Confidence score\n    quote: str                 # Relevant text quote\n</code></pre>"},{"location":"api/absa-agent/#example-response","title":"Example Response","text":"<pre><code>{\n  \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"polarity\": \"neutral\",\n  \"score\": 0.5,\n  \"aspects\": [\n    {\n      \"aspect\": \"camera quality\",\n      \"sentiment\": \"positive\",\n      \"score\": 0.95,\n      \"quote\": \"camera quality is excellent\"\n    },\n    {\n      \"aspect\": \"battery life\",\n      \"sentiment\": \"negative\",\n      \"score\": 0.98,\n      \"quote\": \"battery life is disappointing\"\n    }\n  ],\n  \"message\": \"ABSA completed successfully.\",\n  \"text\": \"The camera quality is excellent but the battery life is disappointing.\"\n}\n</code></pre>"},{"location":"api/absa-agent/#best-practices","title":"Best Practices","text":""},{"location":"api/absa-agent/#error-handling_1","title":"Error Handling","text":"<p>Always wrap agent calls in try-catch blocks:</p> <pre><code>try:\n    result = await run_absa(text)\n    # Process result\nexcept ValueError as e:\n    logger.error(f\"Input validation error: {e}\")\nexcept Exception as e:\n    logger.error(f\"Analysis error: {e}\")\n</code></pre>"},{"location":"api/absa-agent/#batch-processing","title":"Batch Processing","text":"<p>For multiple analyses, add delays between calls:</p> <pre><code>results = []\nfor text in texts:\n    result = await run_absa(text)\n    results.append(result)\n    await asyncio.sleep(2)  # Respect rate limits\n</code></pre>"},{"location":"api/absa-agent/#logging","title":"Logging","text":"<p>The agent logs important events:</p> <pre><code>logger.info(f\"Metin analizi ba\u015flat\u0131l\u0131yor: {text[:50]}...\")\nlogger.info(f\"Analiz tamamland\u0131 - Polarity: {result.polarity}, Score: {result.score}\")\n</code></pre>"},{"location":"api/absa-agent/#troubleshooting","title":"Troubleshooting","text":""},{"location":"api/absa-agent/#common-issues","title":"Common Issues","text":"<ol> <li>Empty Text Error: Ensure input contains valid text</li> <li>Audio File Not Found: Verify file path is correct</li> <li>Transcription Failure: Check audio file format and quality</li> <li>API Rate Limits: Add delays between requests</li> </ol>"},{"location":"api/absa-agent/#debugging","title":"Debugging","text":"<p>Enable debug logging to see detailed workflow:</p> <pre><code>LOG_LEVEL=DEBUG\n</code></pre> <p>This will show: - Content type detection results - Language detection results - Analysis progress - Error details</p>"},{"location":"api/response-models/","title":"Response Models","text":"<p>Aspectify uses Pydantic models for structured data validation and serialization.</p>"},{"location":"api/response-models/#absaresponse","title":"ABSAResponse","text":"<p>Main response model for aspect-based sentiment analysis results.</p>"},{"location":"api/response-models/#schema","title":"Schema","text":"<pre><code>class ABSAResponse(BaseModel):\n    id: str\n    polarity: str\n    score: float\n    aspects: List[AspectAnalysisResponse]\n    message: str\n    text: str\n</code></pre>"},{"location":"api/response-models/#fields","title":"Fields","text":"Field Type Description <code>id</code> <code>str</code> Unique identifier (UUID) for the analysis <code>polarity</code> <code>str</code> Overall sentiment: \"positive\", \"negative\", or \"neutral\" <code>score</code> <code>float</code> Confidence score (0.0-1.0) for overall sentiment <code>aspects</code> <code>List[AspectAnalysisResponse]</code> List of individual aspect analyses <code>message</code> <code>str</code> Status message indicating success or failure <code>text</code> <code>str</code> Original text or transcribed audio content"},{"location":"api/response-models/#example","title":"Example","text":"<pre><code>{\n  \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"polarity\": \"neutral\",\n  \"score\": 0.5,\n  \"aspects\": [\n    {\n      \"aspect\": \"camera quality\",\n      \"sentiment\": \"positive\",\n      \"score\": 0.95,\n      \"quote\": \"camera quality is excellent\"\n    },\n    {\n      \"aspect\": \"battery life\",\n      \"sentiment\": \"negative\",\n      \"score\": 0.98,\n      \"quote\": \"battery life is disappointing\"\n    }\n  ],\n  \"message\": \"ABSA completed successfully.\",\n  \"text\": \"The camera quality is excellent but the battery life is disappointing.\"\n}\n</code></pre>"},{"location":"api/response-models/#aspectanalysisresponse","title":"AspectAnalysisResponse","text":"<p>Individual aspect analysis within the main response.</p>"},{"location":"api/response-models/#schema_1","title":"Schema","text":"<pre><code>class AspectAnalysisResponse(BaseModel):\n    aspect: str\n    sentiment: str\n    score: float\n    quote: str\n</code></pre>"},{"location":"api/response-models/#fields_1","title":"Fields","text":"Field Type Description <code>aspect</code> <code>str</code> Name of the aspect (e.g., \"camera\", \"battery\", \"service\") <code>sentiment</code> <code>str</code> Sentiment for this aspect: \"positive\", \"negative\", or \"neutral\" <code>score</code> <code>float</code> Confidence score (0.0-1.0) for this aspect's sentiment <code>quote</code> <code>str</code> Relevant text excerpt that supports this aspect analysis"},{"location":"api/response-models/#example_1","title":"Example","text":"<pre><code>{\n  \"aspect\": \"camera quality\",\n  \"sentiment\": \"positive\",\n  \"score\": 0.95,\n  \"quote\": \"camera quality is excellent\"\n}\n</code></pre>"},{"location":"api/response-models/#llmresponse","title":"LLMResponse","text":"<p>Response model for raw LLM analysis results.</p>"},{"location":"api/response-models/#schema_2","title":"Schema","text":"<pre><code>class LLMResponse(BaseModel):\n    polarity: str\n    score: float\n    aspects: List[AspectAnalysisResponse]\n</code></pre>"},{"location":"api/response-models/#fields_2","title":"Fields","text":"Field Type Description <code>polarity</code> <code>str</code> Overall sentiment from LLM <code>score</code> <code>float</code> Overall confidence score <code>aspects</code> <code>List[AspectAnalysisResponse]</code> Aspect analyses from LLM"},{"location":"api/response-models/#data-validation","title":"Data Validation","text":"<p>All response models use Pydantic for automatic validation:</p>"},{"location":"api/response-models/#type-validation","title":"Type Validation","text":"<pre><code># Automatic type conversion and validation\nresponse = ABSAResponse(\n    id=\"123\",  # str\n    polarity=\"positive\",  # str\n    score=0.95,  # float\n    aspects=[],  # List[AspectAnalysisResponse]\n    message=\"Success\",  # str\n    text=\"Sample text\"  # str\n)\n</code></pre>"},{"location":"api/response-models/#validation-errors","title":"Validation Errors","text":"<pre><code>from pydantic import ValidationError\n\ntry:\n    response = ABSAResponse(\n        id=\"123\",\n        polarity=\"invalid\",  # Not in allowed values\n        score=\"not_a_number\",  # Not a float\n        aspects=[],\n        message=\"Success\",\n        text=\"Sample text\"\n    )\nexcept ValidationError as e:\n    print(e.errors())\n</code></pre>"},{"location":"api/response-models/#serialization","title":"Serialization","text":""},{"location":"api/response-models/#json-serialization","title":"JSON Serialization","text":"<pre><code># Convert to JSON\njson_data = response.model_dump_json(indent=2)\n\n# Convert to dictionary\ndict_data = response.model_dump()\n</code></pre>"},{"location":"api/response-models/#json-deserialization","title":"JSON Deserialization","text":"<pre><code># From JSON string\nresponse = ABSAResponse.model_validate_json(json_string)\n\n# From dictionary\nresponse = ABSAResponse.model_validate(dict_data)\n</code></pre>"},{"location":"api/response-models/#field-constraints","title":"Field Constraints","text":""},{"location":"api/response-models/#polarity-values","title":"Polarity Values","text":"<p>Valid polarity values: - <code>\"positive\"</code>: Positive sentiment - <code>\"negative\"</code>: Negative sentiment - <code>\"neutral\"</code>: Neutral sentiment</p>"},{"location":"api/response-models/#score-range","title":"Score Range","text":"<p>Scores must be between 0.0 and 1.0: - <code>0.0</code>: No confidence - <code>0.5</code>: Moderate confidence - <code>1.0</code>: Maximum confidence</p>"},{"location":"api/response-models/#string-constraints","title":"String Constraints","text":"<ul> <li><code>id</code>: Must be a valid UUID string</li> <li><code>aspect</code>: Should be descriptive (e.g., \"camera quality\", not \"camera\")</li> <li><code>quote</code>: Should be a relevant excerpt from the original text</li> </ul>"},{"location":"api/response-models/#usage-examples","title":"Usage Examples","text":""},{"location":"api/response-models/#creating-responses","title":"Creating Responses","text":"<pre><code>from app.schemas.response.absa_response import ABSAResponse, AspectAnalysisResponse\nimport uuid\n\n# Create aspect analysis\naspect = AspectAnalysisResponse(\n    aspect=\"camera quality\",\n    sentiment=\"positive\",\n    score=0.95,\n    quote=\"camera quality is excellent\"\n)\n\n# Create main response\nresponse = ABSAResponse(\n    id=str(uuid.uuid4()),\n    polarity=\"neutral\",\n    score=0.5,\n    aspects=[aspect],\n    message=\"ABSA completed successfully.\",\n    text=\"The camera quality is excellent but the battery life is disappointing.\"\n)\n</code></pre>"},{"location":"api/response-models/#processing-responses","title":"Processing Responses","text":"<pre><code># Access response data\nprint(f\"Analysis ID: {response.id}\")\nprint(f\"Overall sentiment: {response.polarity}\")\nprint(f\"Confidence: {response.score}\")\n\n# Process aspects\nfor aspect in response.aspects:\n    print(f\"Aspect: {aspect.aspect}\")\n    print(f\"Sentiment: {aspect.sentiment}\")\n    print(f\"Confidence: {aspect.score}\")\n    print(f\"Quote: {aspect.quote}\")\n    print(\"---\")\n</code></pre>"},{"location":"api/response-models/#error-responses","title":"Error Responses","text":"<pre><code># Create error response\nerror_response = ABSAResponse(\n    id=str(uuid.uuid4()),\n    polarity=\"neutral\",\n    score=0.0,\n    aspects=[],\n    message=\"Analysis failed: Invalid input\",\n    text=\"\"\n)\n</code></pre>"},{"location":"api/response-models/#best-practices","title":"Best Practices","text":""},{"location":"api/response-models/#response-creation","title":"Response Creation","text":"<ol> <li>Always use UUIDs: Generate unique IDs for each analysis</li> <li>Meaningful messages: Provide clear status messages</li> <li>Valid scores: Ensure scores are within 0.0-1.0 range</li> <li>Descriptive aspects: Use clear, descriptive aspect names</li> </ol>"},{"location":"api/response-models/#error-handling","title":"Error Handling","text":"<ol> <li>Graceful degradation: Provide fallback responses for errors</li> <li>Clear error messages: Include helpful error information</li> <li>Consistent structure: Maintain response structure even for errors</li> </ol>"},{"location":"api/response-models/#performance","title":"Performance","text":"<ol> <li>Efficient serialization: Use <code>model_dump()</code> for better performance</li> <li>Minimal data: Only include necessary fields in responses</li> <li>Caching: Cache frequently accessed response data</li> </ol>"},{"location":"architecture/core/","title":"Core Modules","text":"<p>The core modules provide the foundational infrastructure for the Aspectify application.</p>"},{"location":"architecture/core/#configuration-appcoreconfigpy","title":"Configuration (<code>app/core/config.py</code>)","text":"<p>Centralized configuration management using Pydantic Settings.</p>"},{"location":"architecture/core/#features","title":"Features","text":"<ul> <li>Environment Variable Integration: Automatically loads from <code>.env</code> files</li> <li>Type Safety: Pydantic validation for all configuration values</li> <li>Secret Management: Secure handling of API keys and sensitive data</li> <li>Default Values: Sensible defaults for all configuration options</li> </ul>"},{"location":"architecture/core/#configuration-class","title":"Configuration Class","text":"<pre><code>class Settings(BaseSettings):\n    model_config = SettingsConfigDict(env_file=\".env\", extra=\"ignore\")\n\n    PROJECT_NAME: str = \"Aspectify\"\n    PROJECT_VERSION: str = \"1.0.0\"\n    LOG_LEVEL: str = \"INFO\"\n    GOOGLE_API_KEY: SecretStr | None = None\n    GEMINI_1_5_FLASH_MODEL: str = \"gemini-1.5-flash\"\n</code></pre>"},{"location":"architecture/core/#usage","title":"Usage","text":"<pre><code>from app.core.config import settings\n\n# Access configuration\nproject_name = settings.PROJECT_NAME\nlog_level = settings.LOG_LEVEL\n\n# Access secret values\nif settings.GOOGLE_API_KEY:\n    api_key = settings.GOOGLE_API_KEY.get_secret_value()\n</code></pre>"},{"location":"architecture/core/#environment-variables","title":"Environment Variables","text":"Variable Type Required Default Description <code>GOOGLE_API_KEY</code> SecretStr Yes None Google API key for Gemini models <code>PROJECT_NAME</code> str No \"Aspectify\" Application name <code>PROJECT_VERSION</code> str No \"1.0.0\" Application version <code>LOG_LEVEL</code> str No \"INFO\" Logging level <code>GEMINI_1_5_FLASH_MODEL</code> str No \"gemini-1.5-flash\" AI model name"},{"location":"architecture/core/#logging-appcorelogging_configpy","title":"Logging (<code>app/core/logging_config.py</code>)","text":"<p>Centralized logging system with file-based output.</p>"},{"location":"architecture/core/#features_1","title":"Features","text":"<ul> <li>File-based Logging: All logs written to <code>logs/app.log</code></li> <li>Configurable Levels: Supports DEBUG, INFO, WARNING, ERROR, CRITICAL</li> <li>UTF-8 Encoding: Proper handling of international characters</li> <li>Automatic Directory Creation: Creates logs directory if needed</li> <li>Structured Format: Consistent log message format</li> </ul>"},{"location":"architecture/core/#logging-setup","title":"Logging Setup","text":"<pre><code>def setup_logging():\n    log_level = settings.LOG_LEVEL.upper()\n\n    # Create logs directory if it doesn't exist\n    import os\n    os.makedirs(\"logs\", exist_ok=True)\n\n    # Configure logging with only file handler\n    logging.basicConfig(\n        level=log_level,\n        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n        handlers=[\n            logging.FileHandler('logs/app.log', encoding='utf-8')\n        ]\n    )\n\n    logger = logging.getLogger(__name__)\n    logger.info(f\"Logging initialized with level: {log_level}\")\n    return logger\n</code></pre>"},{"location":"architecture/core/#usage_1","title":"Usage","text":"<pre><code>from app.core.logging_config import logger\n\n# Log different levels\nlogger.debug(\"Debug information\")\nlogger.info(\"General information\")\nlogger.warning(\"Warning message\")\nlogger.error(\"Error occurred\")\nlogger.critical(\"Critical error\")\n</code></pre>"},{"location":"architecture/core/#log-format","title":"Log Format","text":"<pre><code>2025-10-12 11:17:38,234 - app.core.logging_config - INFO - Analiz tamamland\u0131 - Polarity: neutral, Score: 0.5\n</code></pre> <p>Format components: - Timestamp: When the log entry was created - Logger Name: Which module created the log - Level: Log severity level - Message: The actual log message</p>"},{"location":"architecture/core/#log-levels","title":"Log Levels","text":"Level Description Use Case <code>DEBUG</code> Detailed diagnostic information Development debugging <code>INFO</code> General information about program execution Normal operation tracking <code>WARNING</code> Something unexpected happened Potential issues <code>ERROR</code> A serious problem occurred Error conditions <code>CRITICAL</code> A very serious error occurred System failures"},{"location":"architecture/core/#integration-with-application","title":"Integration with Application","text":""},{"location":"architecture/core/#initialization","title":"Initialization","text":"<p>The core modules are initialized when imported:</p> <pre><code># config.py\nsettings = Settings()  # Automatically loads configuration\n\n# logging_config.py\nlogger = setup_logging()  # Sets up logging system\n</code></pre>"},{"location":"architecture/core/#global-access","title":"Global Access","text":"<p>Both configuration and logging are available globally:</p> <pre><code># In any module\nfrom app.core.config import settings\nfrom app.core.logging_config import logger\n\n# Use throughout the application\nlogger.info(f\"Starting {settings.PROJECT_NAME} v{settings.PROJECT_VERSION}\")\n</code></pre>"},{"location":"architecture/core/#best-practices","title":"Best Practices","text":""},{"location":"architecture/core/#configuration","title":"Configuration","text":"<ol> <li>Environment Variables: Store sensitive data in environment variables</li> <li>Type Validation: Use Pydantic types for automatic validation</li> <li>Default Values: Provide sensible defaults for all settings</li> <li>Documentation: Document all configuration options</li> </ol>"},{"location":"architecture/core/#logging","title":"Logging","text":"<ol> <li>Appropriate Levels: Use the right log level for each message</li> <li>Structured Messages: Include relevant context in log messages</li> <li>Error Context: Log errors with sufficient context for debugging</li> <li>Performance: Avoid expensive operations in log messages</li> </ol>"},{"location":"architecture/core/#security","title":"Security","text":"<ol> <li>Secret Handling: Use <code>SecretStr</code> for sensitive configuration</li> <li>No Hardcoding: Never hardcode credentials in source code</li> <li>Environment Separation: Use different configurations for different environments</li> <li>Access Control: Limit access to configuration and log files</li> </ol>"},{"location":"architecture/core/#troubleshooting","title":"Troubleshooting","text":""},{"location":"architecture/core/#configuration-issues","title":"Configuration Issues","text":"<p>Problem: Configuration not loading <pre><code># Check if .env file exists and is readable\nimport os\nprint(os.path.exists('.env'))\n</code></pre></p> <p>Problem: Invalid configuration values <pre><code># Pydantic will raise validation errors\nfrom app.core.config import settings  # Will raise ValidationError if invalid\n</code></pre></p>"},{"location":"architecture/core/#logging-issues","title":"Logging Issues","text":"<p>Problem: Logs not appearing <pre><code># Check if logs directory exists and is writable\nimport os\nprint(os.path.exists('logs'))\nprint(os.access('logs', os.W_OK))\n</code></pre></p> <p>Problem: Log level too restrictive <pre><code># Change log level in .env file\nLOG_LEVEL=DEBUG\n</code></pre></p>"},{"location":"architecture/overview/","title":"Architecture Overview","text":"<p>Aspectify follows a modular, layered architecture designed for maintainability, scalability, and clear separation of concerns.</p>"},{"location":"architecture/overview/#system-architecture","title":"System Architecture","text":"<pre><code>graph TB\n    A[Main Application] --&gt; B[ABSA Agent]\n    B --&gt; C[Content Type Identifier]\n    B --&gt; D[Language Detector]\n    B --&gt; E[Transcriber]\n    B --&gt; F[ABSA Analyzer]\n\n    F --&gt; G[AI Models]\n    G --&gt; H[Google Gemini]\n\n    B --&gt; I[Response Schemas]\n    I --&gt; J[ABSA Response]\n    I --&gt; K[Aspect Response]\n\n    L[Core] --&gt; M[Configuration]\n    L --&gt; N[Logging]\n\n    O[Logic] --&gt; P[Content Processing]\n    O --&gt; Q[Language Detection]\n    O --&gt; R[Audio Transcription]\n</code></pre>"},{"location":"architecture/overview/#core-components","title":"Core Components","text":""},{"location":"architecture/overview/#1-agents-appagents","title":"1. Agents (<code>app/agents/</code>)","text":"<p>High-level orchestration layer that coordinates the analysis workflow:</p> <ul> <li>ABSA Agent: Main orchestrator for aspect-based sentiment analysis</li> <li>Handles content type detection, transcription, and analysis coordination</li> <li>Manages error handling and response formatting</li> </ul>"},{"location":"architecture/overview/#2-ai-models-appai_models","title":"2. AI Models (<code>app/ai_models/</code>)","text":"<p>Integration layer for AI model services:</p> <ul> <li>LLM Models: Google Gemini model integration</li> <li>Whisper Models: Audio transcription model integration</li> <li>Handles model configuration and API communication</li> </ul>"},{"location":"architecture/overview/#3-tools-apptools","title":"3. Tools (<code>app/tools/</code>)","text":"<p>Specialized analysis tools and utilities:</p> <ul> <li>ABSA Analyzer: Core sentiment analysis tool using LangChain</li> <li>Provides structured analysis with aspect extraction</li> <li>Handles prompt engineering and response parsing</li> </ul>"},{"location":"architecture/overview/#4-logic-applogic","title":"4. Logic (<code>app/logic/</code>)","text":"<p>Core business logic for content processing:</p> <ul> <li>Content Type Identifier: Determines if input is text or audio</li> <li>Language Detector: Identifies content language</li> <li>Transcriber: Converts audio to text</li> </ul>"},{"location":"architecture/overview/#5-schemas-appschemas","title":"5. Schemas (<code>app/schemas/</code>)","text":"<p>Data models and validation:</p> <ul> <li>Request Schemas: Input validation models</li> <li>Response Schemas: Output structure definitions</li> <li>Ensures type safety and data consistency</li> </ul>"},{"location":"architecture/overview/#6-core-appcore","title":"6. Core (<code>app/core/</code>)","text":"<p>Infrastructure and configuration:</p> <ul> <li>Configuration: Environment and application settings</li> <li>Logging: Centralized logging system</li> <li>Provides foundation services for the entire application</li> </ul>"},{"location":"architecture/overview/#data-flow","title":"Data Flow","text":""},{"location":"architecture/overview/#text-analysis-flow","title":"Text Analysis Flow","text":"<ol> <li>Input: Text string received</li> <li>Content Type: Identified as text</li> <li>Language Detection: Language determined</li> <li>ABSA Analysis: Sentiment analysis performed</li> <li>Response: Structured results returned</li> </ol>"},{"location":"architecture/overview/#audio-analysis-flow","title":"Audio Analysis Flow","text":"<ol> <li>Input: Audio file path received</li> <li>Content Type: Identified as audio</li> <li>Transcription: Audio converted to text</li> <li>Language Detection: Language determined</li> <li>ABSA Analysis: Sentiment analysis performed</li> <li>Response: Structured results returned</li> </ol>"},{"location":"architecture/overview/#design-principles","title":"Design Principles","text":""},{"location":"architecture/overview/#1-separation-of-concerns","title":"1. Separation of Concerns","text":"<p>Each module has a single, well-defined responsibility:</p> <ul> <li>Agents: Orchestration and workflow management</li> <li>Tools: Specific analysis capabilities</li> <li>Logic: Business rules and processing</li> <li>Schemas: Data structure definitions</li> <li>Core: Infrastructure services</li> </ul>"},{"location":"architecture/overview/#2-dependency-injection","title":"2. Dependency Injection","text":"<p>Components receive their dependencies rather than creating them:</p> <pre><code># Good: Dependency injection\ndef analyze_text(text: str, analyzer: ABSAAnalyzer):\n    return analyzer.analyze(text)\n\n# Avoid: Direct instantiation\ndef analyze_text(text: str):\n    analyzer = ABSAAnalyzer()  # Tight coupling\n    return analyzer.analyze(text)\n</code></pre>"},{"location":"architecture/overview/#3-error-handling","title":"3. Error Handling","text":"<p>Comprehensive error handling at each layer:</p> <ul> <li>Input Validation: Schema validation for inputs</li> <li>Business Logic: Graceful handling of processing errors</li> <li>External Services: Retry logic and fallback mechanisms</li> <li>Logging: Detailed error logging for debugging</li> </ul>"},{"location":"architecture/overview/#4-configuration-management","title":"4. Configuration Management","text":"<p>Centralized configuration with environment-specific settings:</p> <ul> <li>Environment Variables: Secure configuration storage</li> <li>Type Safety: Pydantic-based configuration validation</li> <li>Default Values: Sensible defaults for all settings</li> </ul>"},{"location":"architecture/overview/#scalability-considerations","title":"Scalability Considerations","text":""},{"location":"architecture/overview/#1-asyncawait-pattern","title":"1. Async/Await Pattern","text":"<p>All I/O operations use async/await for better performance:</p> <pre><code>async def run_absa(data: str) -&gt; ABSAResponse:\n    # Non-blocking operations\n    content_type = identify_content_type(data)\n    if is_audio_path:\n        text_content = await transcribe_from_path(data)\n    # ...\n</code></pre>"},{"location":"architecture/overview/#2-modular-design","title":"2. Modular Design","text":"<p>Easy to extend with new analysis types:</p> <ul> <li>Add new agents for different analysis types</li> <li>Implement new tools for specialized processing</li> <li>Extend schemas for new data structures</li> </ul>"},{"location":"architecture/overview/#3-external-service-integration","title":"3. External Service Integration","text":"<p>Clean separation from external services:</p> <ul> <li>AI model integration through dedicated modules</li> <li>Easy to swap or add new model providers</li> <li>Rate limiting and error handling built-in</li> </ul>"},{"location":"architecture/overview/#security-considerations","title":"Security Considerations","text":""},{"location":"architecture/overview/#1-api-key-management","title":"1. API Key Management","text":"<ul> <li>Secure storage in environment variables</li> <li>Pydantic SecretStr for sensitive data</li> <li>No hardcoded credentials</li> </ul>"},{"location":"architecture/overview/#2-input-validation","title":"2. Input Validation","text":"<ul> <li>Schema-based validation for all inputs</li> <li>Sanitization of user-provided data</li> <li>Type checking throughout the system</li> </ul>"},{"location":"architecture/overview/#3-error-information","title":"3. Error Information","text":"<ul> <li>No sensitive information in error messages</li> <li>Comprehensive logging for debugging</li> <li>Graceful degradation on failures</li> </ul>"},{"location":"architecture/overview/#performance-optimizations","title":"Performance Optimizations","text":""},{"location":"architecture/overview/#1-caching","title":"1. Caching","text":"<ul> <li>Model instances cached for reuse</li> <li>Configuration loaded once at startup</li> <li>Efficient memory usage patterns</li> </ul>"},{"location":"architecture/overview/#2-rate-limiting","title":"2. Rate Limiting","text":"<ul> <li>Built-in delays for API calls</li> <li>Respectful of external service limits</li> <li>Configurable retry mechanisms</li> </ul>"},{"location":"architecture/overview/#3-resource-management","title":"3. Resource Management","text":"<ul> <li>Proper cleanup of resources</li> <li>Efficient file handling</li> <li>Memory-conscious data structures</li> </ul>"},{"location":"deployment/environment/","title":"Environment Setup","text":"<p>This guide covers setting up Aspectify in different environments for development, testing, and production.</p>"},{"location":"deployment/environment/#development-environment","title":"Development Environment","text":""},{"location":"deployment/environment/#local-development-setup","title":"Local Development Setup","text":"<ol> <li> <p>Clone Repository <pre><code>git clone https://github.com/your-username/aspectify.git\ncd aspectify\n</code></pre></p> </li> <li> <p>Create Virtual Environment <pre><code>python -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install Dependencies <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Environment Configuration <pre><code># Copy example environment file\ncp .env.example .env\n\n# Edit .env file with your settings\nGOOGLE_API_KEY=your_google_api_key_here\nLOG_LEVEL=DEBUG\n</code></pre></p> </li> <li> <p>Verify Installation <pre><code>python main.py\n</code></pre></p> </li> </ol>"},{"location":"deployment/environment/#development-tools","title":"Development Tools","text":""},{"location":"deployment/environment/#code-quality-tools","title":"Code Quality Tools","text":"<pre><code># Install development dependencies\npip install black flake8 mypy pytest-cov\n\n# Format code\nblack .\n\n# Lint code\nflake8 .\n\n# Type checking\nmypy .\n\n# Run tests with coverage\npytest --cov=app tests/\n</code></pre>"},{"location":"deployment/environment/#ide-configuration","title":"IDE Configuration","text":"<p>VS Code Settings (<code>.vscode/settings.json</code>): <pre><code>{\n    \"python.defaultInterpreterPath\": \"./.venv/bin/python\",\n    \"python.linting.enabled\": true,\n    \"python.linting.flake8Enabled\": true,\n    \"python.formatting.provider\": \"black\",\n    \"python.testing.pytestEnabled\": true\n}\n</code></pre></p>"},{"location":"deployment/environment/#testing-environment","title":"Testing Environment","text":""},{"location":"deployment/environment/#test-configuration","title":"Test Configuration","text":"<ol> <li> <p>Test Environment File (<code>.env.testing</code>): <pre><code>GOOGLE_API_KEY=test_api_key\nLOG_LEVEL=DEBUG\nPROJECT_NAME=Aspectify-Test\n</code></pre></p> </li> <li> <p>Test Database (if using database): <pre><code>DATABASE_URL=postgresql+asyncpg://test:test@localhost:5432/aspectify_test\n</code></pre></p> </li> </ol>"},{"location":"deployment/environment/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npytest\n\n# Run with coverage\npytest --cov=app --cov-report=html\n\n# Run specific test file\npytest tests/unit/test_absa_agent.py\n\n# Run with verbose output\npytest -v\n</code></pre>"},{"location":"deployment/environment/#test-data","title":"Test Data","text":"<p>Test data is located in <code>test_data/text/test_texts.jsonl</code>:</p> <pre><code>{\"text\": \"The camera quality is excellent but the battery life is disappointing.\", \"expected_sentiment\": \"neutral\"}\n{\"text\": \"Great product, fast delivery!\", \"expected_sentiment\": \"positive\"}\n{\"text\": \"Poor quality, slow shipping.\", \"expected_sentiment\": \"negative\"}\n</code></pre>"},{"location":"deployment/environment/#production-environment","title":"Production Environment","text":""},{"location":"deployment/environment/#production-configuration","title":"Production Configuration","text":"<ol> <li> <p>Production Environment File (<code>.env.production</code>): <pre><code>GOOGLE_API_KEY=production_api_key\nLOG_LEVEL=INFO\nPROJECT_NAME=Aspectify\nPROJECT_VERSION=1.0.0\n</code></pre></p> </li> <li> <p>Security Settings: <pre><code># Use strong, unique API keys\nGOOGLE_API_KEY=your_production_google_api_key\n\n# Set appropriate log level\nLOG_LEVEL=INFO\n\n# Use production database\nDATABASE_URL=postgresql+asyncpg://user:password@prod-db:5432/aspectify\n</code></pre></p> </li> </ol>"},{"location":"deployment/environment/#production-deployment","title":"Production Deployment","text":""},{"location":"deployment/environment/#docker-deployment","title":"Docker Deployment","text":"<ol> <li> <p>Dockerfile: <pre><code>FROM python:3.11-slim\n\nWORKDIR /app\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    gcc \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Copy requirements and install Python dependencies\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy application code\nCOPY . .\n\n# Create logs directory\nRUN mkdir -p logs\n\n# Set environment variables\nENV PYTHONPATH=/app\nENV LOG_LEVEL=INFO\n\n# Run application\nCMD [\"python\", \"main.py\"]\n</code></pre></p> </li> <li> <p>Docker Compose (<code>docker-compose.yml</code>): <pre><code>version: '3.8'\n\nservices:\n  aspectify:\n    build: .\n    ports:\n      - \"8000:8000\"\n    environment:\n      - GOOGLE_API_KEY=${GOOGLE_API_KEY}\n      - LOG_LEVEL=INFO\n    volumes:\n      - ./logs:/app/logs\n    restart: unless-stopped\n</code></pre></p> </li> <li> <p>Deploy with Docker: <pre><code># Build and run\ndocker-compose up -d\n\n# View logs\ndocker-compose logs -f aspectify\n</code></pre></p> </li> </ol>"},{"location":"deployment/environment/#cloud-deployment","title":"Cloud Deployment","text":"<p>AWS EC2 Setup: <pre><code># Update system\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install Python and pip\nsudo apt install python3 python3-pip python3-venv -y\n\n# Clone repository\ngit clone https://github.com/your-username/aspectify.git\ncd aspectify\n\n# Create virtual environment\npython3 -m venv .venv\nsource .venv/bin/activate\n\n# Install dependencies\npip install -r requirements.txt\n\n# Set up environment variables\necho \"GOOGLE_API_KEY=your_key_here\" &gt; .env\necho \"LOG_LEVEL=INFO\" &gt;&gt; .env\n\n# Run application\npython main.py\n</code></pre></p> <p>Google Cloud Platform: <pre><code># app.yaml\nruntime: python311\n\nenv_variables:\n  GOOGLE_API_KEY: \"your_google_api_key\"\n  LOG_LEVEL: \"INFO\"\n\nhandlers:\n- url: /.*\n  script: auto\n</code></pre></p>"},{"location":"deployment/environment/#environment-variables","title":"Environment Variables","text":""},{"location":"deployment/environment/#required-variables","title":"Required Variables","text":"Variable Description Example <code>GOOGLE_API_KEY</code> Google API key for Gemini models <code>AIzaSy...</code>"},{"location":"deployment/environment/#optional-variables","title":"Optional Variables","text":"Variable Description Default Example <code>PROJECT_NAME</code> Application name <code>Aspectify</code> <code>Aspectify-Prod</code> <code>PROJECT_VERSION</code> Application version <code>1.0.0</code> <code>1.2.3</code> <code>LOG_LEVEL</code> Logging level <code>INFO</code> <code>DEBUG</code> <code>GEMINI_1_5_FLASH_MODEL</code> AI model name <code>gemini-1.5-flash</code> <code>gemini-1.5-pro</code>"},{"location":"deployment/environment/#database-variables-optional","title":"Database Variables (Optional)","text":"Variable Description Example <code>DATABASE_URL</code> Database connection string <code>postgresql+asyncpg://user:pass@host:5432/db</code>"},{"location":"deployment/environment/#vector-database-variables-optional","title":"Vector Database Variables (Optional)","text":"Variable Description Example <code>PINECONE_API_KEY</code> Pinecone API key <code>pc-...</code> <code>PINECONE_ENVIRONMENT</code> Pinecone environment <code>us-west1-gcp</code> <code>PINECONE_INDEX_NAME</code> Pinecone index name <code>aspectify-index</code>"},{"location":"deployment/environment/#environment-specific-configurations","title":"Environment-Specific Configurations","text":""},{"location":"deployment/environment/#development","title":"Development","text":"<ul> <li>Log Level: <code>DEBUG</code> for detailed information</li> <li>API Keys: Use development/test keys</li> <li>Database: Local development database</li> <li>Error Handling: Verbose error messages</li> </ul>"},{"location":"deployment/environment/#testing","title":"Testing","text":"<ul> <li>Log Level: <code>DEBUG</code> for test debugging</li> <li>API Keys: Use test API keys</li> <li>Database: Test database with sample data</li> <li>Error Handling: Detailed error reporting</li> </ul>"},{"location":"deployment/environment/#production","title":"Production","text":"<ul> <li>Log Level: <code>INFO</code> for normal operation</li> <li>API Keys: Production API keys with proper permissions</li> <li>Database: Production database with backups</li> <li>Error Handling: Secure error messages, no sensitive data</li> </ul>"},{"location":"deployment/environment/#monitoring-and-logging","title":"Monitoring and Logging","text":""},{"location":"deployment/environment/#production-logging","title":"Production Logging","text":"<ol> <li> <p>Log Rotation: <pre><code># Set up logrotate\nsudo nano /etc/logrotate.d/aspectify\n\n# Content:\n/var/log/aspectify/*.log {\n    daily\n    missingok\n    rotate 52\n    compress\n    delaycompress\n    notifempty\n    create 644 aspectify aspectify\n}\n</code></pre></p> </li> <li> <p>Log Monitoring: <pre><code># Monitor logs in real-time\ntail -f logs/app.log\n\n# Search for errors\ngrep \"ERROR\" logs/app.log\n\n# Count log entries by level\ngrep -c \"INFO\" logs/app.log\n</code></pre></p> </li> </ol>"},{"location":"deployment/environment/#health-checks","title":"Health Checks","text":"<p>Create a health check endpoint:</p> <pre><code># health_check.py\nimport asyncio\nfrom app.core.config import settings\nfrom app.core.logging_config import logger\n\nasync def health_check():\n    try:\n        # Check configuration\n        if not settings.GOOGLE_API_KEY:\n            return {\"status\": \"unhealthy\", \"error\": \"Missing API key\"}\n\n        # Check logging\n        logger.info(\"Health check performed\")\n\n        return {\"status\": \"healthy\", \"timestamp\": \"2025-10-12T11:00:00Z\"}\n    except Exception as e:\n        logger.error(f\"Health check failed: {e}\")\n        return {\"status\": \"unhealthy\", \"error\": str(e)}\n\nif __name__ == \"__main__\":\n    result = asyncio.run(health_check())\n    print(result)\n</code></pre>"},{"location":"deployment/environment/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/environment/#common-issues","title":"Common Issues","text":"<ol> <li> <p>API Key Not Found: <pre><code># Check environment variables\necho $GOOGLE_API_KEY\n\n# Check .env file\ncat .env\n</code></pre></p> </li> <li> <p>Permission Errors: <pre><code># Fix log directory permissions\nchmod 755 logs/\nchmod 644 logs/app.log\n</code></pre></p> </li> <li> <p>Memory Issues: <pre><code># Monitor memory usage\nfree -h\nps aux --sort=-%mem | head\n</code></pre></p> </li> <li> <p>Network Issues: <pre><code># Test API connectivity\ncurl -H \"Authorization: Bearer $GOOGLE_API_KEY\" \\\n     https://generativelanguage.googleapis.com/v1beta/models\n</code></pre></p> </li> </ol>"},{"location":"deployment/environment/#performance-optimization","title":"Performance Optimization","text":"<ol> <li> <p>Resource Limits: <pre><code># Set memory limits\nulimit -v 2097152  # 2GB virtual memory\n\n# Set file descriptor limits\nulimit -n 4096\n</code></pre></p> </li> <li> <p>Process Management: <pre><code># Use process manager like PM2\nnpm install -g pm2\npm2 start main.py --name aspectify\npm2 monit\n</code></pre></p> </li> </ol>"},{"location":"deployment/requirements/","title":"Requirements","text":"<p>This document outlines the system requirements and dependencies for deploying Aspectify.</p>"},{"location":"deployment/requirements/#system-requirements","title":"System Requirements","text":""},{"location":"deployment/requirements/#operating-system","title":"Operating System","text":"<ul> <li>Windows: Windows 10 or later</li> <li>macOS: macOS 10.14 or later</li> <li>Linux: Ubuntu 18.04+ or equivalent</li> </ul>"},{"location":"deployment/requirements/#python-version","title":"Python Version","text":"<ul> <li>Python: 3.8 or higher</li> <li>Recommended: Python 3.11 or 3.12</li> </ul>"},{"location":"deployment/requirements/#memory","title":"Memory","text":"<ul> <li>Minimum: 2GB RAM</li> <li>Recommended: 4GB RAM or more</li> <li>For large-scale processing: 8GB+ RAM</li> </ul>"},{"location":"deployment/requirements/#storage","title":"Storage","text":"<ul> <li>Minimum: 1GB free disk space</li> <li>Recommended: 5GB+ for logs and temporary files</li> </ul>"},{"location":"deployment/requirements/#python-dependencies","title":"Python Dependencies","text":""},{"location":"deployment/requirements/#core-dependencies","title":"Core Dependencies","text":"<pre><code>fastapi==0.111.0\npydantic==2.11.7\nuvicorn==0.29.0\npython-multipart==0.0.9\ndatabases[postgresql]==0.9.0\npsycopg2-binary==2.9.9\nsqlalchemy==2.0.30\nlangchain\nlangchain-google-genai\npydantic-settings==2.2.1\npinecone-client==3.2.1\npytest==7.4.4\npackaging==24.1\ntransformers==4.42.1\nstreamlit==1.34.0\nsoundfile==0.12.1\nlibrosa==0.10.2.post1\ntorch==2.3.1\nopenai-whisper==20231117\nlangdetect==1.0.9\ngoogle-generativeai\n</code></pre>"},{"location":"deployment/requirements/#dependency-categories","title":"Dependency Categories","text":""},{"location":"deployment/requirements/#web-framework","title":"Web Framework","text":"<ul> <li><code>fastapi</code>: Modern web framework for APIs</li> <li><code>uvicorn</code>: ASGI server for FastAPI</li> <li><code>python-multipart</code>: File upload support</li> </ul>"},{"location":"deployment/requirements/#data-validation","title":"Data Validation","text":"<ul> <li><code>pydantic</code>: Data validation and settings management</li> <li><code>pydantic-settings</code>: Environment-based configuration</li> </ul>"},{"location":"deployment/requirements/#aiml-libraries","title":"AI/ML Libraries","text":"<ul> <li><code>langchain</code>: LLM application framework</li> <li><code>langchain-google-genai</code>: Google Gemini integration</li> <li><code>google-generativeai</code>: Google's official Generative AI library</li> <li><code>transformers</code>: Hugging Face transformers</li> <li><code>torch</code>: PyTorch for ML models</li> <li><code>openai-whisper</code>: Audio transcription</li> </ul>"},{"location":"deployment/requirements/#audio-processing","title":"Audio Processing","text":"<ul> <li><code>soundfile</code>: Audio file I/O</li> <li><code>librosa</code>: Audio analysis library</li> </ul>"},{"location":"deployment/requirements/#database","title":"Database","text":"<ul> <li><code>databases</code>: Async database support</li> <li><code>psycopg2-binary</code>: PostgreSQL adapter</li> <li><code>sqlalchemy</code>: SQL toolkit and ORM</li> </ul>"},{"location":"deployment/requirements/#vector-database","title":"Vector Database","text":"<ul> <li><code>pinecone-client</code>: Pinecone vector database client</li> </ul>"},{"location":"deployment/requirements/#utilities","title":"Utilities","text":"<ul> <li><code>langdetect</code>: Language detection</li> <li><code>packaging</code>: Version handling</li> <li><code>streamlit</code>: Web app framework (optional)</li> </ul>"},{"location":"deployment/requirements/#testing","title":"Testing","text":"<ul> <li><code>pytest</code>: Testing framework</li> </ul>"},{"location":"deployment/requirements/#external-services","title":"External Services","text":""},{"location":"deployment/requirements/#required-services","title":"Required Services","text":""},{"location":"deployment/requirements/#google-ai-studio","title":"Google AI Studio","text":"<ul> <li>Purpose: Gemini AI model access</li> <li>API Key: Required for all AI operations</li> <li>Rate Limits: Varies by plan</li> <li>Documentation: Google AI Studio</li> </ul>"},{"location":"deployment/requirements/#optional-services","title":"Optional Services","text":""},{"location":"deployment/requirements/#postgresql-database","title":"PostgreSQL Database","text":"<ul> <li>Purpose: Data persistence</li> <li>Version: 12 or later</li> <li>Configuration: Connection string in environment variables</li> </ul>"},{"location":"deployment/requirements/#pinecone-vector-database","title":"Pinecone Vector Database","text":"<ul> <li>Purpose: Vector storage and similarity search</li> <li>Configuration: API key and environment settings</li> </ul>"},{"location":"deployment/requirements/#environment-variables","title":"Environment Variables","text":""},{"location":"deployment/requirements/#required-variables","title":"Required Variables","text":"<pre><code># Google API Key (Required)\nGOOGLE_API_KEY=your_google_api_key_here\n</code></pre>"},{"location":"deployment/requirements/#optional-variables","title":"Optional Variables","text":"<pre><code># Application Settings\nPROJECT_NAME=Aspectify\nPROJECT_VERSION=1.0.0\nLOG_LEVEL=INFO\n\n# AI Model Configuration\nGEMINI_1_5_FLASH_MODEL=gemini-1.5-flash\n\n# Database (Optional)\nDATABASE_URL=postgresql+asyncpg://user:password@localhost:5432/dbname\n\n# Vector Database (Optional)\nPINECONE_API_KEY=your_pinecone_api_key\nPINECONE_ENVIRONMENT=your_pinecone_environment\nPINECONE_INDEX_NAME=aspectify-index\n</code></pre>"},{"location":"deployment/requirements/#installation-methods","title":"Installation Methods","text":""},{"location":"deployment/requirements/#method-1-pip-install","title":"Method 1: pip install","text":"<pre><code># Clone repository\ngit clone https://github.com/your-username/aspectify.git\ncd aspectify\n\n# Create virtual environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies\npip install -r requirements.txt\n</code></pre>"},{"location":"deployment/requirements/#method-2-docker","title":"Method 2: Docker","text":"<pre><code>FROM python:3.11-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\nCOPY . .\n\nCMD [\"python\", \"main.py\"]\n</code></pre>"},{"location":"deployment/requirements/#method-3-conda","title":"Method 3: Conda","text":"<pre><code># Create conda environment\nconda create -n aspectify python=3.11\nconda activate aspectify\n\n# Install dependencies\npip install -r requirements.txt\n</code></pre>"},{"location":"deployment/requirements/#platform-specific-requirements","title":"Platform-Specific Requirements","text":""},{"location":"deployment/requirements/#windows","title":"Windows","text":"<ul> <li>Visual C++ Redistributable: Required for some Python packages</li> <li>Git: For cloning the repository</li> <li>PowerShell: For running scripts</li> </ul>"},{"location":"deployment/requirements/#macos","title":"macOS","text":"<ul> <li>Xcode Command Line Tools: Required for compiling some packages</li> <li>Homebrew: Recommended for package management</li> </ul>"},{"location":"deployment/requirements/#linux","title":"Linux","text":"<ul> <li>Build tools: <code>build-essential</code> package</li> <li>Python development headers: <code>python3-dev</code></li> <li>Audio libraries: <code>libsndfile1-dev</code> for audio processing</li> </ul>"},{"location":"deployment/requirements/#performance-considerations","title":"Performance Considerations","text":""},{"location":"deployment/requirements/#cpu-requirements","title":"CPU Requirements","text":"<ul> <li>Minimum: 2 CPU cores</li> <li>Recommended: 4+ CPU cores for better performance</li> <li>AI Processing: More cores improve analysis speed</li> </ul>"},{"location":"deployment/requirements/#memory-usage","title":"Memory Usage","text":"<ul> <li>Base Application: ~200MB RAM</li> <li>AI Models: Additional 500MB-2GB depending on model size</li> <li>Audio Processing: Additional 100-500MB for large audio files</li> </ul>"},{"location":"deployment/requirements/#storage-requirements","title":"Storage Requirements","text":"<ul> <li>Application: ~500MB</li> <li>Logs: 10-100MB per day depending on usage</li> <li>Temporary Files: 1-10GB for audio processing</li> </ul>"},{"location":"deployment/requirements/#security-requirements","title":"Security Requirements","text":""},{"location":"deployment/requirements/#api-keys","title":"API Keys","text":"<ul> <li>Google API Key: Store securely, never commit to version control</li> <li>Database Credentials: Use strong passwords and secure storage</li> <li>Environment Variables: Use <code>.env</code> files with proper permissions</li> </ul>"},{"location":"deployment/requirements/#network-security","title":"Network Security","text":"<ul> <li>HTTPS: Use SSL/TLS for production deployments</li> <li>Firewall: Restrict access to necessary ports only</li> <li>API Rate Limiting: Implement rate limiting for external APIs</li> </ul>"},{"location":"deployment/requirements/#monitoring-requirements","title":"Monitoring Requirements","text":""},{"location":"deployment/requirements/#logging","title":"Logging","text":"<ul> <li>Log Files: Ensure sufficient disk space for log rotation</li> <li>Log Monitoring: Set up log monitoring and alerting</li> <li>Error Tracking: Implement error tracking and reporting</li> </ul>"},{"location":"deployment/requirements/#performance-monitoring","title":"Performance Monitoring","text":"<ul> <li>CPU Usage: Monitor CPU usage during analysis</li> <li>Memory Usage: Track memory consumption</li> <li>Response Times: Monitor API response times</li> <li>Error Rates: Track error rates and types</li> </ul>"},{"location":"deployment/requirements/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/requirements/#common-installation-issues","title":"Common Installation Issues","text":"<ol> <li>Package compilation errors: Install build tools and development headers</li> <li>Audio library issues: Install system audio libraries</li> <li>Memory errors: Increase available memory or use smaller models</li> <li>API key errors: Verify API key is correctly set and has proper permissions</li> </ol>"},{"location":"deployment/requirements/#performance-issues","title":"Performance Issues","text":"<ol> <li>Slow analysis: Check CPU and memory usage</li> <li>High memory usage: Consider using smaller models or processing fewer items</li> <li>Network timeouts: Check network connectivity and API rate limits</li> </ol>"},{"location":"deployment/requirements/#dependency-conflicts","title":"Dependency Conflicts","text":"<ol> <li>Version conflicts: Use virtual environments to isolate dependencies</li> <li>Platform-specific issues: Check platform-specific installation instructions</li> <li>Outdated packages: Update packages to latest compatible versions</li> </ol>"},{"location":"development/logging/","title":"Logging System","text":"<p>Aspectify includes a comprehensive logging system for debugging, monitoring, and troubleshooting.</p>"},{"location":"development/logging/#overview","title":"Overview","text":"<p>The logging system is centralized in <code>app/core/logging_config.py</code> and provides:</p> <ul> <li>File-based logging: All logs written to <code>logs/app.log</code></li> <li>Configurable levels: DEBUG, INFO, WARNING, ERROR, CRITICAL</li> <li>Structured format: Consistent timestamp and context information</li> <li>UTF-8 encoding: Proper handling of international characters</li> </ul>"},{"location":"development/logging/#configuration","title":"Configuration","text":""},{"location":"development/logging/#log-levels","title":"Log Levels","text":"<p>Set the log level in your <code>.env</code> file:</p> <pre><code>LOG_LEVEL=INFO\n</code></pre> <p>Available levels (in order of verbosity):</p> Level Description Use Case <code>DEBUG</code> Detailed diagnostic information Development debugging <code>INFO</code> General information about program execution Normal operation tracking <code>WARNING</code> Something unexpected happened Potential issues <code>ERROR</code> A serious problem occurred Error conditions <code>CRITICAL</code> A very serious error occurred System failures"},{"location":"development/logging/#log-format","title":"Log Format","text":"<pre><code>2025-10-12 11:17:38,234 - app.core.logging_config - INFO - Analiz tamamland\u0131 - Polarity: neutral, Score: 0.5\n</code></pre> <p>Format components: - Timestamp: <code>2025-10-12 11:17:38,234</code> - Logger Name: <code>app.core.logging_config</code> - Level: <code>INFO</code> - Message: <code>Analiz tamamland\u0131 - Polarity: neutral, Score: 0.5</code></p>"},{"location":"development/logging/#usage","title":"Usage","text":""},{"location":"development/logging/#basic-logging","title":"Basic Logging","text":"<pre><code>from app.core.logging_config import logger\n\n# Different log levels\nlogger.debug(\"Debug information\")\nlogger.info(\"General information\")\nlogger.warning(\"Warning message\")\nlogger.error(\"Error occurred\")\nlogger.critical(\"Critical error\")\n</code></pre>"},{"location":"development/logging/#contextual-logging","title":"Contextual Logging","text":"<p>Include relevant context in your log messages:</p> <pre><code># Good: Include context\nlogger.info(f\"Metin analizi ba\u015flat\u0131l\u0131yor: {text[:50]}...\")\nlogger.info(f\"Analiz tamamland\u0131 - Polarity: {result.polarity}, Score: {result.score}\")\n\n# Avoid: Generic messages\nlogger.info(\"Analysis started\")\nlogger.info(\"Analysis completed\")\n</code></pre>"},{"location":"development/logging/#error-logging","title":"Error Logging","text":"<p>Log errors with sufficient context for debugging:</p> <pre><code>try:\n    result = await run_absa(text)\nexcept Exception as e:\n    logger.error(f\"Analiz s\u0131ras\u0131nda hata olu\u015ftu: {e}\")\n    logger.error(f\"Input text: {text[:100]}...\")\n    raise\n</code></pre>"},{"location":"development/logging/#log-file-management","title":"Log File Management","text":""},{"location":"development/logging/#file-location","title":"File Location","text":"<p>Logs are written to <code>logs/app.log</code> in the project root directory.</p>"},{"location":"development/logging/#automatic-directory-creation","title":"Automatic Directory Creation","text":"<p>The logging system automatically creates the <code>logs</code> directory if it doesn't exist:</p> <pre><code>import os\nos.makedirs(\"logs\", exist_ok=True)\n</code></pre>"},{"location":"development/logging/#file-rotation","title":"File Rotation","text":"<p>For production environments, consider implementing log rotation:</p> <pre><code>from logging.handlers import RotatingFileHandler\n\n# Add to logging configuration\nhandler = RotatingFileHandler(\n    'logs/app.log',\n    maxBytes=10*1024*1024,  # 10MB\n    backupCount=5\n)\n</code></pre>"},{"location":"development/logging/#integration-with-application","title":"Integration with Application","text":""},{"location":"development/logging/#main-application","title":"Main Application","text":"<p>The main application logs key events:</p> <pre><code>from app.core.logging_config import logger\n\nasync def main():\n    logger.info(\"ABSA uygulamas\u0131 ba\u015flat\u0131l\u0131yor...\")\n\n    # ... application logic ...\n\n    logger.info(\"Test verileri okunuyor ve duygu analizi yap\u0131l\u0131yor...\")\n</code></pre>"},{"location":"development/logging/#absa-agent","title":"ABSA Agent","text":"<p>The ABSA agent logs analysis progress:</p> <pre><code>logger.info(f\"Metin analizi ba\u015flat\u0131l\u0131yor: {text[:50]}...\")\nlogger.info(f\"Analiz tamamland\u0131 - Polarity: {result.polarity}, Score: {result.score}\")\n</code></pre>"},{"location":"development/logging/#error-handling","title":"Error Handling","text":"<p>Comprehensive error logging throughout the application:</p> <pre><code>try:\n    # ... operation ...\nexcept ValueError as e:\n    logger.error(f\"Input validation error: {e}\")\nexcept Exception as e:\n    logger.error(f\"Unexpected error: {e}\")\n</code></pre>"},{"location":"development/logging/#debugging-with-logs","title":"Debugging with Logs","text":""},{"location":"development/logging/#development-debugging","title":"Development Debugging","text":"<p>Enable debug logging for detailed information:</p> <pre><code>LOG_LEVEL=DEBUG\n</code></pre> <p>This will show: - Content type detection results - Language detection results - Analysis progress - Detailed error information</p>"},{"location":"development/logging/#production-monitoring","title":"Production Monitoring","text":"<p>Use INFO level for production monitoring:</p> <pre><code>LOG_LEVEL=INFO\n</code></pre> <p>This provides: - Application startup/shutdown events - Analysis completion events - Error conditions - Performance metrics</p>"},{"location":"development/logging/#error-investigation","title":"Error Investigation","text":"<p>When investigating errors:</p> <ol> <li>Check log level: Ensure appropriate level is set</li> <li>Look for ERROR/CRITICAL: Focus on error messages</li> <li>Trace execution: Follow the sequence of events</li> <li>Context information: Use logged context for debugging</li> </ol>"},{"location":"development/logging/#best-practices","title":"Best Practices","text":""},{"location":"development/logging/#log-message-guidelines","title":"Log Message Guidelines","text":"<ol> <li>Be descriptive: Include relevant context</li> <li>Use appropriate levels: Don't log everything as INFO</li> <li>Include variables: Log important variable values</li> <li>Avoid sensitive data: Don't log passwords or API keys</li> </ol>"},{"location":"development/logging/#performance-considerations","title":"Performance Considerations","text":"<ol> <li>Avoid expensive operations: Don't do heavy computation in log messages</li> <li>Use lazy evaluation: Use f-strings or format strings efficiently</li> <li>Minimize log volume: Don't log excessively in tight loops</li> </ol>"},{"location":"development/logging/#error-handling_1","title":"Error Handling","text":"<ol> <li>Log before raising: Log errors before re-raising exceptions</li> <li>Include stack traces: Use <code>logger.exception()</code> for automatic stack traces</li> <li>Context preservation: Maintain context through error handling</li> </ol>"},{"location":"development/logging/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/logging/#logs-not-appearing","title":"Logs Not Appearing","text":"<ol> <li>Check file permissions: Ensure write access to logs directory</li> <li>Verify log level: Check if log level is too restrictive</li> <li>Check file path: Ensure logs directory exists</li> </ol>"},{"location":"development/logging/#log-file-issues","title":"Log File Issues","text":"<ol> <li>Disk space: Ensure sufficient disk space for log files</li> <li>File locks: Check if log file is locked by another process</li> <li>Encoding issues: Verify UTF-8 encoding is working correctly</li> </ol>"},{"location":"development/logging/#performance-issues","title":"Performance Issues","text":"<ol> <li>Log volume: Reduce log volume if causing performance issues</li> <li>File I/O: Consider async logging for high-volume applications</li> <li>Log rotation: Implement log rotation for long-running applications</li> </ol>"},{"location":"development/logging/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"development/logging/#custom-loggers","title":"Custom Loggers","text":"<p>Create module-specific loggers:</p> <pre><code>import logging\n\n# Create module-specific logger\nlogger = logging.getLogger(__name__)\n\n# Use in your module\nlogger.info(\"Module-specific message\")\n</code></pre>"},{"location":"development/logging/#log-filtering","title":"Log Filtering","text":"<p>Filter logs by module or level:</p> <pre><code># Filter by module\nclass ModuleFilter(logging.Filter):\n    def filter(self, record):\n        return record.name.startswith('app.agents')\n\n# Add filter to handler\nhandler.addFilter(ModuleFilter())\n</code></pre>"},{"location":"development/logging/#structured-logging","title":"Structured Logging","text":"<p>For advanced use cases, consider structured logging:</p> <pre><code>import json\n\n# Structured log message\nlog_data = {\n    \"event\": \"analysis_completed\",\n    \"polarity\": result.polarity,\n    \"score\": result.score,\n    \"aspects_count\": len(result.aspects)\n}\nlogger.info(json.dumps(log_data))\n</code></pre>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>Aspectify uses a centralized configuration system through the <code>app.core.config</code> module.</p>"},{"location":"getting-started/configuration/#configuration-file","title":"Configuration File","text":"<p>The main configuration is defined in <code>app/core/config.py</code>:</p> <pre><code>from pydantic_settings import BaseSettings, SettingsConfigDict\nfrom pydantic import SecretStr\n\nclass Settings(BaseSettings):\n    model_config = SettingsConfigDict(env_file=\".env\", extra=\"ignore\")\n\n    PROJECT_NAME: str = \"Aspectify\"\n    PROJECT_VERSION: str = \"1.0.0\"\n    LOG_LEVEL: str = \"INFO\"\n    GOOGLE_API_KEY: SecretStr | None = None\n    GEMINI_1_5_FLASH_MODEL: str = \"gemini-1.5-flash\"\n</code></pre>"},{"location":"getting-started/configuration/#environment-variables","title":"Environment Variables","text":"<p>Create a <code>.env</code> file in your project root with the following variables:</p>"},{"location":"getting-started/configuration/#required-variables","title":"Required Variables","text":"<pre><code># Google API Key (Required)\nGOOGLE_API_KEY=your_google_api_key_here\n</code></pre>"},{"location":"getting-started/configuration/#optional-variables","title":"Optional Variables","text":"<pre><code># Application Settings\nPROJECT_NAME=Aspectify\nPROJECT_VERSION=1.0.0\nLOG_LEVEL=INFO\n\n# AI Model Configuration\nGEMINI_1_5_FLASH_MODEL=gemini-1.5-flash\n</code></pre>"},{"location":"getting-started/configuration/#configuration-options","title":"Configuration Options","text":""},{"location":"getting-started/configuration/#log-levels","title":"Log Levels","text":"<p>Available log levels (in order of verbosity):</p> <ul> <li><code>DEBUG</code>: Detailed information for debugging</li> <li><code>INFO</code>: General information about program execution</li> <li><code>WARNING</code>: Something unexpected happened</li> <li><code>ERROR</code>: A serious problem occurred</li> <li><code>CRITICAL</code>: A very serious error occurred</li> </ul>"},{"location":"getting-started/configuration/#ai-models","title":"AI Models","text":"<p>Currently supported Gemini models:</p> <ul> <li><code>gemini-1.5-flash</code>: Fast and efficient model</li> <li><code>gemini-1.5-pro</code>: More capable but slower model</li> </ul>"},{"location":"getting-started/configuration/#using-configuration","title":"Using Configuration","text":"<p>Access configuration settings in your code:</p> <pre><code>from app.core.config import settings\n\n# Access settings\nprint(f\"Project: {settings.PROJECT_NAME}\")\nprint(f\"Version: {settings.PROJECT_VERSION}\")\nprint(f\"Log Level: {settings.LOG_LEVEL}\")\n\n# Access secret values\nif settings.GOOGLE_API_KEY:\n    api_key = settings.GOOGLE_API_KEY.get_secret_value()\n</code></pre>"},{"location":"getting-started/configuration/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Never commit <code>.env</code> files to version control</li> <li>Use strong API keys and rotate them regularly</li> <li>Limit API key permissions to only what's necessary</li> <li>Use environment-specific configurations for different deployments</li> </ol>"},{"location":"getting-started/configuration/#environment-specific-configuration","title":"Environment-Specific Configuration","text":"<p>For different environments, you can use different <code>.env</code> files:</p> <pre><code># Development\n.env.development\n\n# Production\n.env.production\n\n# Testing\n.env.testing\n</code></pre>"},{"location":"getting-started/configuration/#validation","title":"Validation","text":"<p>The configuration system uses Pydantic for validation:</p> <ul> <li>Type checking: Ensures correct data types</li> <li>Required fields: Validates required variables are present</li> <li>Default values: Provides sensible defaults</li> <li>Secret handling: Safely handles sensitive information</li> </ul>"},{"location":"getting-started/configuration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/configuration/#configuration-not-loading","title":"Configuration Not Loading","text":"<ol> <li>Check <code>.env</code> file exists in project root</li> <li>Verify file permissions</li> <li>Ensure no syntax errors in <code>.env</code> file</li> </ol>"},{"location":"getting-started/configuration/#api-key-issues","title":"API Key Issues","text":"<ol> <li>Verify key is correctly copied (no extra spaces)</li> <li>Check key has proper permissions</li> <li>Ensure key is not expired</li> </ol>"},{"location":"getting-started/configuration/#model-configuration","title":"Model Configuration","text":"<ol> <li>Verify model name is correct</li> <li>Check model availability in your region</li> <li>Ensure API key has access to the model</li> </ol>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This guide will help you set up the Aspectify development environment.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>pip (Python package installer)</li> <li>Git</li> </ul>"},{"location":"getting-started/installation/#step-1-clone-the-repository","title":"Step 1: Clone the Repository","text":"<pre><code>git clone https://github.com/your-username/aspectify.git\ncd aspectify\n</code></pre>"},{"location":"getting-started/installation/#step-2-create-virtual-environment","title":"Step 2: Create Virtual Environment","text":"<pre><code># Create virtual environment\npython -m venv .venv\n\n# Activate virtual environment\n# On Windows:\n.venv\\Scripts\\activate\n# On macOS/Linux:\nsource .venv/bin/activate\n</code></pre>"},{"location":"getting-started/installation/#step-3-install-dependencies","title":"Step 3: Install Dependencies","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"getting-started/installation/#step-4-environment-configuration","title":"Step 4: Environment Configuration","text":"<p>Create a <code>.env</code> file in the project root:</p> <pre><code># Google API Configuration\nGOOGLE_API_KEY=your_google_api_key_here\n\n# Application Settings\nLOG_LEVEL=INFO\nPROJECT_NAME=Aspectify\nPROJECT_VERSION=1.0.0\n</code></pre>"},{"location":"getting-started/installation/#step-5-verify-installation","title":"Step 5: Verify Installation","text":"<p>Run the test script to verify everything is working:</p> <pre><code>python main.py\n</code></pre> <p>You should see output similar to:</p> <pre><code>--------------------------------------------------\nTest verileri okunuyor ve duygu analizi yap\u0131l\u0131yor...\n--------------------------------------------------\n\nAnaliz Edilen Metin: Yeni ald\u0131\u011f\u0131m telefonun kameras\u0131 harika foto\u011fraflar \u00e7ekiyor ama bataryas\u0131 bir g\u00fcn\u00fc zor \u00e7\u0131kar\u0131yor.\nBeklenen Duygu: neutral\nAjan Sonucu (Polarite): neutral\nAjan Sonucu (Skor): 0.5\nAjan Sonucu (Aspektler): [AspectAnalysisResponse(aspect='kamera', sentiment='positive', score=0.98), AspectAnalysisResponse(aspect='batarya', sentiment='negative', score=0.99)]\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<ol> <li>ModuleNotFoundError: Make sure you've activated the virtual environment</li> <li>API Key Error: Verify your Google API key is correctly set in <code>.env</code></li> <li>Permission Errors: Ensure you have write permissions in the project directory</li> </ol>"},{"location":"getting-started/installation/#getting-google-api-key","title":"Getting Google API Key","text":"<ol> <li>Visit Google AI Studio</li> <li>Create a new project or select existing one</li> <li>Generate an API key</li> <li>Copy the key to your <code>.env</code> file</li> </ol>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Configuration - Learn about application configuration</li> <li>Quick Start - Run your first analysis</li> </ul>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>Get up and running with Aspectify in minutes.</p>"},{"location":"getting-started/quick-start/#basic-text-analysis","title":"Basic Text Analysis","text":"<p>The simplest way to use Aspectify is to analyze text directly:</p> <pre><code>import asyncio\nfrom app.agents.absa_agent import run_absa\n\nasync def analyze_text():\n    text = \"The camera quality is excellent but the battery life is disappointing.\"\n\n    result = await run_absa(text)\n\n    print(f\"Overall sentiment: {result.polarity}\")\n    print(f\"Confidence score: {result.score}\")\n    print(f\"Analysis ID: {result.id}\")\n\n    for aspect in result.aspects:\n        print(f\"\\nAspect: {aspect.aspect}\")\n        print(f\"Sentiment: {aspect.sentiment}\")\n        print(f\"Confidence: {aspect.score}\")\n        print(f\"Quote: {aspect.quote}\")\n\n# Run the analysis\nasyncio.run(analyze_text())\n</code></pre>"},{"location":"getting-started/quick-start/#expected-output","title":"Expected Output","text":"<pre><code>Overall sentiment: neutral\nConfidence score: 0.5\nAnalysis ID: 123e4567-e89b-12d3-a456-426614174000\n\nAspect: camera quality\nSentiment: positive\nConfidence: 0.95\nQuote: camera quality is excellent\n\nAspect: battery life\nSentiment: negative\nConfidence: 0.98\nQuote: battery life is disappointing\n</code></pre>"},{"location":"getting-started/quick-start/#audio-file-analysis","title":"Audio File Analysis","text":"<p>Aspectify can also analyze audio files by transcribing them first:</p> <pre><code>import asyncio\nfrom app.agents.absa_agent import run_absa\n\nasync def analyze_audio():\n    audio_file_path = \"path/to/your/audio.wav\"\n\n    result = await run_absa(audio_file_path)\n\n    print(f\"Transcribed text: {result.text}\")\n    print(f\"Overall sentiment: {result.polarity}\")\n\n    for aspect in result.aspects:\n        print(f\"{aspect.aspect}: {aspect.sentiment}\")\n\nasyncio.run(analyze_audio())\n</code></pre>"},{"location":"getting-started/quick-start/#batch-analysis","title":"Batch Analysis","text":"<p>Process multiple texts at once:</p> <pre><code>import asyncio\nfrom app.agents.absa_agent import run_absa\n\nasync def batch_analysis():\n    texts = [\n        \"Great product, fast delivery!\",\n        \"Poor quality, slow shipping.\",\n        \"Average product, good customer service.\"\n    ]\n\n    results = []\n    for text in texts:\n        result = await run_absa(text)\n        results.append(result)\n\n        # Add delay to respect API rate limits\n        await asyncio.sleep(2)\n\n    # Process results\n    for i, result in enumerate(results):\n        print(f\"Text {i+1}: {result.polarity} (score: {result.score})\")\n\nasyncio.run(batch_analysis())\n</code></pre>"},{"location":"getting-started/quick-start/#using-the-main-script","title":"Using the Main Script","text":"<p>The project includes a main script that processes test data:</p> <pre><code>python main.py\n</code></pre> <p>This will: 1. Load test data from <code>test_data/text/test_texts.jsonl</code> 2. Process each text through the ABSA agent 3. Display results and summary</p>"},{"location":"getting-started/quick-start/#response-structure","title":"Response Structure","text":"<p>The <code>ABSAResponse</code> object contains:</p> <pre><code>class ABSAResponse:\n    id: str                    # Unique identifier\n    polarity: str              # Overall sentiment (positive/negative/neutral)\n    score: float               # Confidence score (0.0-1.0)\n    aspects: List[AspectAnalysisResponse]  # Individual aspect analysis\n    message: str               # Status message\n    text: str                  # Original or transcribed text\n</code></pre> <p>Each aspect contains:</p> <pre><code>class AspectAnalysisResponse:\n    aspect: str                # Aspect name (e.g., \"camera\", \"battery\")\n    sentiment: str             # Aspect sentiment (positive/negative/neutral)\n    score: float               # Confidence score (0.0-1.0)\n    quote: str                 # Relevant text quote\n</code></pre>"},{"location":"getting-started/quick-start/#error-handling","title":"Error Handling","text":"<p>Always wrap your analysis calls in try-catch blocks:</p> <pre><code>import asyncio\nfrom app.agents.absa_agent import run_absa\n\nasync def safe_analysis():\n    try:\n        result = await run_absa(\"Your text here\")\n        print(f\"Success: {result.polarity}\")\n    except ValueError as e:\n        print(f\"Input error: {e}\")\n    except Exception as e:\n        print(f\"Analysis error: {e}\")\n\nasyncio.run(safe_analysis())\n</code></pre>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>Architecture Overview - Understand the system design</li> <li>API Reference - Detailed API documentation</li> <li>Development Guide - Contribute to the project</li> </ul>"},{"location":"tr/","title":"Aspectify","text":"<p>Aspect-Based Sentiment Analysis (ABSA) Uygulamas\u0131</p> <p>Aspectify, Google'\u0131n Gemini AI modellerini kullanarak metin ve ses i\u00e7eri\u011fi \u00fczerinde aspekt tabanl\u0131 duygu analizi ger\u00e7ekle\u015ftiren g\u00fc\u00e7l\u00fc bir uygulamad\u0131r. Ayn\u0131 metin i\u00e7indeki farkl\u0131 aspektler i\u00e7in duygu analizi yaparak kullan\u0131c\u0131 g\u00f6r\u00fc\u015fleri hakk\u0131nda detayl\u0131 i\u00e7g\u00f6r\u00fcler sa\u011flar.</p>"},{"location":"tr/#ozellikler","title":"\u00d6zellikler","text":"<ul> <li>\ud83c\udfaf Aspekt Tabanl\u0131 Analiz: Metin i\u00e7indeki farkl\u0131 aspektleri belirler ve analiz eder</li> <li>\ud83c\udfa4 Ses Deste\u011fi: Ses dosyalar\u0131n\u0131 transkript eder ve duygu analizi yapar</li> <li>\ud83c\udf0d \u00c7ok Dilli Destek: Birden fazla dilde i\u00e7erik tespit eder ve analiz eder</li> <li>\ud83e\udd16 AI Destekli: Do\u011fru duygu analizi i\u00e7in Google Gemini modellerini kullan\u0131r</li> <li>\ud83d\udcca Detayl\u0131 Sonu\u00e7lar: Polarite, g\u00fcven skorlar\u0131 ve aspekt-spesifik al\u0131nt\u0131lar sa\u011flar</li> <li>\ud83d\udcdd Kapsaml\u0131 Loglama: Hata ay\u0131klama ve izleme i\u00e7in tam uygulama loglamas\u0131</li> </ul>"},{"location":"tr/#hzl-baslangc","title":"H\u0131zl\u0131 Ba\u015flang\u0131\u00e7","text":"<pre><code>from app.agents.absa_agent import run_absa\n\n# Metin analizi\nresult = await run_absa(\"Kamera harika ama batarya \u00f6mr\u00fc k\u00f6t\u00fc\")\nprint(f\"Genel duygu: {result.polarity}\")\nprint(f\"G\u00fcven: {result.score}\")\nfor aspect in result.aspects:\n    print(f\"{aspect.aspect}: {aspect.sentiment} ({aspect.score})\")\n</code></pre>"},{"location":"tr/#mimari","title":"Mimari","text":"<p>Aspectify, endi\u015felerin net ayr\u0131m\u0131 ile mod\u00fcler bir mimariyi takip eder:</p> <ul> <li>Ajanlar: Analiz i\u015f ak\u0131\u015flar\u0131n\u0131n \u00fcst d\u00fczey orkestrasyonu</li> <li>AI Modelleri: Google Gemini modelleri ile entegrasyon</li> <li>Ara\u00e7lar: \u00d6zelle\u015fmi\u015f analiz ara\u00e7lar\u0131 ve yard\u0131mc\u0131 programlar</li> <li>Mant\u0131k: \u0130\u00e7erik i\u015fleme i\u00e7in temel i\u015f mant\u0131\u011f\u0131</li> <li>\u015eemalar: Veri modelleri ve do\u011frulama</li> <li>\u00c7ekirdek: Yap\u0131land\u0131rma ve loglama altyap\u0131s\u0131</li> </ul>"},{"location":"tr/#baslangc","title":"Ba\u015flang\u0131\u00e7","text":"<ol> <li>Kurulum - Geli\u015ftirme ortam\u0131n\u0131 kurun</li> <li>Yap\u0131land\u0131rma - API anahtarlar\u0131n\u0131 ve ayarlar\u0131 yap\u0131land\u0131r\u0131n</li> <li>H\u0131zl\u0131 Ba\u015flang\u0131\u00e7 - \u0130lk analizinizi \u00e7al\u0131\u015ft\u0131r\u0131n</li> </ol>"},{"location":"tr/#dokumantasyon","title":"Dok\u00fcmantasyon","text":"<p>Bu dok\u00fcmantasyon Aspectify uygulamas\u0131n\u0131n t\u00fcm y\u00f6nlerini kapsar:</p> <ul> <li>Mimari: Sistem tasar\u0131m\u0131n\u0131 anlama</li> <li>API Referans\u0131: Detayl\u0131 API dok\u00fcmantasyonu</li> <li>Geli\u015ftirme: Katk\u0131da bulunma ve test etme y\u00f6nergeleri</li> <li>Da\u011f\u0131t\u0131m: \u00dcretim da\u011f\u0131t\u0131m talimatlar\u0131</li> </ul>"},{"location":"tr/#ornek-ckt","title":"\u00d6rnek \u00c7\u0131kt\u0131","text":"<pre><code>{\n  \"id\": \"uuid-burada\",\n  \"polarity\": \"neutral\",\n  \"score\": 0.5,\n  \"aspects\": [\n    {\n      \"aspect\": \"kamera\",\n      \"sentiment\": \"positive\",\n      \"score\": 0.95,\n      \"quote\": \"kamera harika\"\n    },\n    {\n      \"aspect\": \"batarya\",\n      \"sentiment\": \"negative\", \n      \"score\": 0.98,\n      \"quote\": \"batarya \u00f6mr\u00fc k\u00f6t\u00fc\"\n    }\n  ],\n  \"message\": \"ABSA ba\u015far\u0131yla tamamland\u0131\",\n  \"text\": \"Kamera harika ama batarya \u00f6mr\u00fc k\u00f6t\u00fc\"\n}\n</code></pre>"},{"location":"tr/#destek","title":"Destek","text":"<p>Sorular, sorunlar veya katk\u0131lar i\u00e7in l\u00fctfen GitHub deposunu ziyaret edin.</p>"},{"location":"tr/api/absa-agent/","title":"ABSA Agent API","text":"<p>ABSA (Aspect-Based Sentiment Analysis) Agent, metin ve ses dosyalar\u0131nda duygu analizi yapan ana bile\u015fendir.</p>"},{"location":"tr/api/absa-agent/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>ABSA Agent, a\u015fa\u011f\u0131daki i\u015flemleri ger\u00e7ekle\u015ftirir:</p> <ol> <li>\u0130\u00e7erik T\u00fcr\u00fc Belirleme: Giri\u015fin metin mi ses dosyas\u0131 m\u0131 oldu\u011funu tespit eder</li> <li>Ses Transkripsiyonu: Ses dosyalar\u0131n\u0131 metne \u00e7evirir</li> <li>Dil Tespiti: Metnin dilini otomatik olarak belirler</li> <li>Duygu Analizi: Aspekt tabanl\u0131 duygu analizi yapar</li> <li>Sonu\u00e7 Formatlama: Yap\u0131land\u0131r\u0131lm\u0131\u015f yan\u0131t d\u00f6nd\u00fcr\u00fcr</li> </ol>"},{"location":"tr/api/absa-agent/#api-referans","title":"API Referans\u0131","text":""},{"location":"tr/api/absa-agent/#run_absa-fonksiyonu","title":"<code>run_absa</code> Fonksiyonu","text":"<pre><code>async def run_absa(data: str) -&gt; ABSAResponse\n</code></pre>"},{"location":"tr/api/absa-agent/#parametreler","title":"Parametreler","text":"Parametre Tip A\u00e7\u0131klama <code>data</code> <code>str</code> Analiz edilecek metin veya ses dosyas\u0131 yolu"},{"location":"tr/api/absa-agent/#donus-degeri","title":"D\u00f6n\u00fc\u015f De\u011feri","text":"<p><code>ABSAResponse</code> nesnesi d\u00f6nd\u00fcr\u00fcr:</p> <pre><code>class ABSAResponse(BaseModel):\n    id: str                    # Benzersiz analiz ID'si\n    polarity: str              # Genel duygu (positive/negative/neutral)\n    score: float               # G\u00fcven skoru (0.0-1.0)\n    aspects: List[AspectAnalysisResponse]  # Aspekt analizleri\n    message: str               # \u0130\u015flem durumu mesaj\u0131\n    text: str                  # Analiz edilen metin\n</code></pre>"},{"location":"tr/api/absa-agent/#ornek-kullanm","title":"\u00d6rnek Kullan\u0131m","text":"<pre><code>import asyncio\nfrom app.agents.absa_agent import run_absa\n\nasync def main():\n    # Metin analizi\n    text = \"Bu telefonun kameras\u0131 harika ama bataryas\u0131 k\u00f6t\u00fc.\"\n    result = await run_absa(text)\n\n    print(f\"ID: {result.id}\")\n    print(f\"Genel Duygu: {result.polarity}\")\n    print(f\"G\u00fcven Skoru: {result.score}\")\n    print(f\"Metin: {result.text}\")\n\n    for aspect in result.aspects:\n        print(f\"Aspekt: {aspect.aspect}\")\n        print(f\"Duygu: {aspect.sentiment}\")\n        print(f\"Skor: {aspect.score}\")\n        print(f\"Al\u0131nt\u0131: {aspect.quote}\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"tr/api/absa-agent/#is-aks","title":"\u0130\u015f Ak\u0131\u015f\u0131","text":""},{"location":"tr/api/absa-agent/#1-icerik-turu-belirleme","title":"1. \u0130\u00e7erik T\u00fcr\u00fc Belirleme","text":"<pre><code>from app.logic.content_type_identifier import identify_content_type\n\ncontent_type = identify_content_type(data)\n# \"text\" veya \"audio_path\" d\u00f6nd\u00fcr\u00fcr\n</code></pre> <p>Desteklenen Ses Formatlar\u0131: - <code>.wav</code> - WAV format\u0131 - <code>.mp3</code> - MP3 format\u0131 - <code>.m4a</code> - M4A format\u0131 - <code>.flac</code> - FLAC format\u0131</p>"},{"location":"tr/api/absa-agent/#2-ses-transkripsiyonu","title":"2. Ses Transkripsiyonu","text":"<pre><code>from app.logic.transcriber import transcribe_from_path\n\nif content_type == \"audio_path\":\n    text_content = transcribe_from_path(data)\n</code></pre> <p>\u00d6zellikler: - OpenAI Whisper modeli kullan\u0131r - Otomatik dil tespiti - Y\u00fcksek do\u011fruluk oran\u0131</p>"},{"location":"tr/api/absa-agent/#3-dil-tespiti","title":"3. Dil Tespiti","text":"<pre><code>from app.logic.language_detector import detect_content_language\n\nlanguage = detect_content_language(text_content)\n# \"tr\", \"en\", \"de\", vb. d\u00f6nd\u00fcr\u00fcr\n</code></pre> <p>Desteklenen Diller: - T\u00fcrk\u00e7e (tr) - \u0130ngilizce (en) - Almanca (de) - Frans\u0131zca (fr) - Ve daha fazlas\u0131...</p>"},{"location":"tr/api/absa-agent/#4-duygu-analizi","title":"4. Duygu Analizi","text":"<pre><code>from app.tools.absa_analyzer import absa_analyzer_tool\n\nresult = absa_analyzer_tool.invoke({\n    \"text\": text_content,\n    \"language\": language\n})\n</code></pre> <p>Analiz \u00d6zellikleri: - Aspekt tabanl\u0131 analiz - \u00c7oklu duygu tespiti - G\u00fcven skorlar\u0131 - Al\u0131nt\u0131 \u00e7\u0131karma</p>"},{"location":"tr/api/absa-agent/#yant-modelleri","title":"Yan\u0131t Modelleri","text":""},{"location":"tr/api/absa-agent/#absaresponse","title":"ABSAResponse","text":"<pre><code>class ABSAResponse(BaseModel):\n    id: str\n    polarity: str\n    score: float\n    aspects: List[AspectAnalysisResponse]\n    message: str\n    text: str\n</code></pre>"},{"location":"tr/api/absa-agent/#aspectanalysisresponse","title":"AspectAnalysisResponse","text":"<pre><code>class AspectAnalysisResponse(BaseModel):\n    aspect: str        # Aspekt ad\u0131\n    sentiment: str     # Duygu (positive/negative/neutral)\n    score: float       # G\u00fcven skoru (0.0-1.0)\n    quote: str         # Metinden al\u0131nt\u0131\n</code></pre>"},{"location":"tr/api/absa-agent/#ornek-yantlar","title":"\u00d6rnek Yan\u0131tlar","text":""},{"location":"tr/api/absa-agent/#basarl-analiz","title":"Ba\u015far\u0131l\u0131 Analiz","text":"<pre><code>{\n  \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"polarity\": \"neutral\",\n  \"score\": 0.5,\n  \"aspects\": [\n    {\n      \"aspect\": \"kamera\",\n      \"sentiment\": \"positive\",\n      \"score\": 0.95,\n      \"quote\": \"kamera harika\"\n    },\n    {\n      \"aspect\": \"batarya\",\n      \"sentiment\": \"negative\",\n      \"score\": 0.98,\n      \"quote\": \"bataryas\u0131 k\u00f6t\u00fc\"\n    }\n  ],\n  \"message\": \"ABSA completed successfully.\",\n  \"text\": \"Bu telefonun kameras\u0131 harika ama bataryas\u0131 k\u00f6t\u00fc.\"\n}\n</code></pre>"},{"location":"tr/api/absa-agent/#hata-durumu","title":"Hata Durumu","text":"<pre><code>{\n  \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"polarity\": \"neutral\",\n  \"score\": 0.0,\n  \"aspects\": [],\n  \"message\": \"Error: The text content to be analyzed cannot be empty.\",\n  \"text\": \"\"\n}\n</code></pre>"},{"location":"tr/api/absa-agent/#hata-yonetimi","title":"Hata Y\u00f6netimi","text":""},{"location":"tr/api/absa-agent/#yaygn-hatalar","title":"Yayg\u0131n Hatalar","text":"Hata A\u00e7\u0131klama \u00c7\u00f6z\u00fcm <code>ValueError: The text content to be analyzed cannot be empty.</code> Bo\u015f metin Ge\u00e7erli metin sa\u011flay\u0131n <code>FileNotFoundError</code> Ses dosyas\u0131 bulunamad\u0131 Dosya yolunu kontrol edin <code>API Key Error</code> Ge\u00e7ersiz API anahtar\u0131 <code>.env</code> dosyas\u0131n\u0131 kontrol edin <code>Model Error</code> AI model hatas\u0131 Model yap\u0131land\u0131rmas\u0131n\u0131 kontrol edin"},{"location":"tr/api/absa-agent/#hata-yakalama","title":"Hata Yakalama","text":"<pre><code>try:\n    result = await run_absa(data)\n    print(f\"Analiz ba\u015far\u0131l\u0131: {result.polarity}\")\nexcept ValueError as e:\n    print(f\"Ge\u00e7ersiz giri\u015f: {e}\")\nexcept FileNotFoundError as e:\n    print(f\"Dosya bulunamad\u0131: {e}\")\nexcept Exception as e:\n    print(f\"Beklenmeyen hata: {e}\")\n</code></pre>"},{"location":"tr/api/absa-agent/#performans","title":"Performans","text":""},{"location":"tr/api/absa-agent/#optimizasyon-ipuclar","title":"Optimizasyon \u0130pu\u00e7lar\u0131","text":"<ol> <li>Asenkron Kullan\u0131m: <code>async/await</code> kullan\u0131n</li> <li>Toplu \u0130\u015flem: Birden fazla metni ayn\u0131 anda i\u015fleyin</li> <li>\u00d6nbellekleme: Sonu\u00e7lar\u0131 \u00f6nbelle\u011fe al\u0131n</li> <li>Dosya Boyutu: B\u00fcy\u00fck ses dosyalar\u0131n\u0131 \u00f6nceden i\u015fleyin</li> </ol>"},{"location":"tr/api/absa-agent/#performans-metrikleri","title":"Performans Metrikleri","text":"<ul> <li>Metin Analizi: ~2-5 saniye</li> <li>Ses Transkripsiyonu: ~10-30 saniye (dosya boyutuna g\u00f6re)</li> <li>Dil Tespiti: ~0.1-0.5 saniye</li> <li>Toplam S\u00fcre: ~15-35 saniye</li> </ul>"},{"location":"tr/api/absa-agent/#test","title":"Test","text":""},{"location":"tr/api/absa-agent/#unit-testler","title":"Unit Testler","text":"<pre><code>import pytest\nfrom app.agents.absa_agent import run_absa\n\n@pytest.mark.asyncio\nasync def test_run_absa_with_text():\n    text = \"Bu \u00fcr\u00fcn harika!\"\n    result = await run_absa(text)\n\n    assert result.polarity in [\"positive\", \"negative\", \"neutral\"]\n    assert 0.0 &lt;= result.score &lt;= 1.0\n    assert len(result.aspects) &gt; 0\n    assert result.text == text\n\n@pytest.mark.asyncio\nasync def test_run_absa_with_audio():\n    audio_path = \"test_data/audio/sample.wav\"\n    result = await run_absa(audio_path)\n\n    assert result.polarity in [\"positive\", \"negative\", \"neutral\"]\n    assert len(result.text) &gt; 0\n</code></pre>"},{"location":"tr/api/absa-agent/#integration-testler","title":"Integration Testler","text":"<pre><code>@pytest.mark.asyncio\nasync def test_end_to_end_flow():\n    # Test verilerini y\u00fckle\n    with open(\"test_data/text/test_texts.jsonl\", \"r\") as f:\n        for line in f:\n            data = json.loads(line.strip())\n            text = data[\"text\"]\n\n            # Analiz yap\n            result = await run_absa(text)\n\n            # Sonu\u00e7lar\u0131 do\u011frula\n            assert result.polarity is not None\n            assert result.score &gt; 0\n            assert len(result.aspects) &gt; 0\n</code></pre>"},{"location":"tr/api/absa-agent/#en-iyi-uygulamalar","title":"En \u0130yi Uygulamalar","text":""},{"location":"tr/api/absa-agent/#kullanm","title":"Kullan\u0131m","text":"<ol> <li>Asenkron Kullan\u0131m: Her zaman <code>async/await</code> kullan\u0131n</li> <li>Hata Yakalama: Try-catch bloklar\u0131 kullan\u0131n</li> <li>Do\u011frulama: Giri\u015f verilerini do\u011frulay\u0131n</li> <li>Loglama: \u0130\u015flemleri loglay\u0131n</li> </ol>"},{"location":"tr/api/absa-agent/#performans_1","title":"Performans","text":"<ol> <li>Toplu \u0130\u015flem: Birden fazla metni ayn\u0131 anda i\u015fleyin</li> <li>\u00d6nbellekleme: Sonu\u00e7lar\u0131 \u00f6nbelle\u011fe al\u0131n</li> <li>Kaynak Y\u00f6netimi: Bellek kullan\u0131m\u0131n\u0131 izleyin</li> <li>Timeout: Uzun s\u00fcren i\u015flemler i\u00e7in timeout ayarlay\u0131n</li> </ol>"},{"location":"tr/api/absa-agent/#guvenlik","title":"G\u00fcvenlik","text":"<ol> <li>Input Validation: Giri\u015f verilerini do\u011frulay\u0131n</li> <li>File Security: Dosya yollar\u0131n\u0131 kontrol edin</li> <li>API Keys: API anahtarlar\u0131n\u0131 g\u00fcvenli tutun</li> <li>Error Messages: Hassas bilgileri hata mesajlar\u0131nda g\u00f6stermeyin</li> </ol>"},{"location":"tr/api/response-models/","title":"Yan\u0131t Modelleri","text":"<p>Aspectify API'si, yap\u0131land\u0131r\u0131lm\u0131\u015f ve tip g\u00fcvenli yan\u0131t modelleri kullan\u0131r.</p>"},{"location":"tr/api/response-models/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>T\u00fcm API yan\u0131tlar\u0131 Pydantic modelleri kullanarak do\u011frulan\u0131r ve serile\u015ftirilir. Bu, tip g\u00fcvenli\u011fi, otomatik do\u011frulama ve API dok\u00fcmantasyonu sa\u011flar.</p>"},{"location":"tr/api/response-models/#ana-yant-modelleri","title":"Ana Yan\u0131t Modelleri","text":""},{"location":"tr/api/response-models/#absaresponse","title":"ABSAResponse","text":"<p>Ana duygu analizi yan\u0131t modeli.</p> <pre><code>class ABSAResponse(BaseModel):\n    id: str\n    polarity: str\n    score: float\n    aspects: List[AspectAnalysisResponse]\n    message: str\n    text: str\n</code></pre>"},{"location":"tr/api/response-models/#alanlar","title":"Alanlar","text":"Alan Tip A\u00e7\u0131klama <code>id</code> <code>str</code> Benzersiz analiz ID'si (UUID) <code>polarity</code> <code>str</code> Genel duygu (positive/negative/neutral) <code>score</code> <code>float</code> G\u00fcven skoru (0.0-1.0) <code>aspects</code> <code>List[AspectAnalysisResponse]</code> Aspekt analizleri listesi <code>message</code> <code>str</code> \u0130\u015flem durumu mesaj\u0131 <code>text</code> <code>str</code> Analiz edilen metin"},{"location":"tr/api/response-models/#ornek","title":"\u00d6rnek","text":"<pre><code>{\n  \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"polarity\": \"neutral\",\n  \"score\": 0.5,\n  \"aspects\": [\n    {\n      \"aspect\": \"kamera\",\n      \"sentiment\": \"positive\",\n      \"score\": 0.95,\n      \"quote\": \"kamera harika\"\n    }\n  ],\n  \"message\": \"ABSA completed successfully.\",\n  \"text\": \"Bu telefonun kameras\u0131 harika.\"\n}\n</code></pre>"},{"location":"tr/api/response-models/#aspectanalysisresponse","title":"AspectAnalysisResponse","text":"<p>Aspekt analizi yan\u0131t modeli.</p> <pre><code>class AspectAnalysisResponse(BaseModel):\n    aspect: str\n    sentiment: str\n    score: float\n    quote: str\n</code></pre>"},{"location":"tr/api/response-models/#alanlar_1","title":"Alanlar","text":"Alan Tip A\u00e7\u0131klama <code>aspect</code> <code>str</code> Aspekt ad\u0131 (\u00f6rn: \"kamera\", \"batarya\") <code>sentiment</code> <code>str</code> Aspekt duygusu (positive/negative/neutral) <code>score</code> <code>float</code> G\u00fcven skoru (0.0-1.0) <code>quote</code> <code>str</code> Metinden ilgili al\u0131nt\u0131"},{"location":"tr/api/response-models/#ornek_1","title":"\u00d6rnek","text":"<pre><code>{\n  \"aspect\": \"kamera\",\n  \"sentiment\": \"positive\",\n  \"score\": 0.95,\n  \"quote\": \"kamera harika foto\u011fraflar \u00e7ekiyor\"\n}\n</code></pre>"},{"location":"tr/api/response-models/#llmresponse","title":"LLMResponse","text":"<p>LLM model yan\u0131t modeli.</p> <pre><code>class LLMResponse(BaseModel):\n    polarity: str\n    score: float\n    aspects: List[AspectAnalysisResponse]\n</code></pre>"},{"location":"tr/api/response-models/#alanlar_2","title":"Alanlar","text":"Alan Tip A\u00e7\u0131klama <code>polarity</code> <code>str</code> Genel duygu (positive/negative/neutral) <code>score</code> <code>float</code> G\u00fcven skoru (0.0-1.0) <code>aspects</code> <code>List[AspectAnalysisResponse]</code> Aspekt analizleri listesi"},{"location":"tr/api/response-models/#ornek_2","title":"\u00d6rnek","text":"<pre><code>{\n  \"polarity\": \"positive\",\n  \"score\": 0.8,\n  \"aspects\": [\n    {\n      \"aspect\": \"kalite\",\n      \"sentiment\": \"positive\",\n      \"score\": 0.9,\n      \"quote\": \"kalite \u00e7ok iyi\"\n    }\n  ]\n}\n</code></pre>"},{"location":"tr/api/response-models/#istek-modelleri","title":"\u0130stek Modelleri","text":""},{"location":"tr/api/response-models/#multimodalrequest","title":"MultiModalRequest","text":"<p>\u00c7oklu modal istek modeli.</p> <pre><code>class MultiModalRequest(BaseModel):\n    data: str\n    language: Optional[str] = None\n</code></pre>"},{"location":"tr/api/response-models/#alanlar_3","title":"Alanlar","text":"Alan Tip A\u00e7\u0131klama <code>data</code> <code>str</code> Analiz edilecek metin veya dosya yolu <code>language</code> <code>Optional[str]</code> \u0130ste\u011fe ba\u011fl\u0131 dil kodu"},{"location":"tr/api/response-models/#ornek_3","title":"\u00d6rnek","text":"<pre><code>{\n  \"data\": \"Bu \u00fcr\u00fcn ger\u00e7ekten harika!\",\n  \"language\": \"tr\"\n}\n</code></pre>"},{"location":"tr/api/response-models/#veri-turleri","title":"Veri T\u00fcrleri","text":""},{"location":"tr/api/response-models/#duygu-turleri","title":"Duygu T\u00fcrleri","text":"<pre><code>from typing import Literal\n\nPolarityType = Literal[\"positive\", \"negative\", \"neutral\"]\nSentimentType = Literal[\"positive\", \"negative\", \"neutral\"]\n</code></pre> <p>De\u011ferler: - <code>positive</code>: Pozitif duygu - <code>negative</code>: Negatif duygu - <code>neutral</code>: N\u00f6tr duygu</p>"},{"location":"tr/api/response-models/#icerik-turleri","title":"\u0130\u00e7erik T\u00fcrleri","text":"<pre><code>from typing import Literal\n\nContentType = Literal[\"text\", \"audio_path\"]\n</code></pre> <p>De\u011ferler: - <code>text</code>: D\u00fcz metin - <code>audio_path</code>: Ses dosyas\u0131 yolu</p>"},{"location":"tr/api/response-models/#dogrulama-kurallar","title":"Do\u011frulama Kurallar\u0131","text":""},{"location":"tr/api/response-models/#absaresponse-dogrulama","title":"ABSAResponse Do\u011frulama","text":"<pre><code>class ABSAResponse(BaseModel):\n    id: str = Field(..., description=\"Benzersiz analiz ID'si\")\n    polarity: str = Field(..., regex=\"^(positive|negative|neutral)$\")\n    score: float = Field(..., ge=0.0, le=1.0, description=\"G\u00fcven skoru\")\n    aspects: List[AspectAnalysisResponse] = Field(..., min_items=0)\n    message: str = Field(..., min_length=1)\n    text: str = Field(..., min_length=1)\n</code></pre>"},{"location":"tr/api/response-models/#aspectanalysisresponse-dogrulama","title":"AspectAnalysisResponse Do\u011frulama","text":"<pre><code>class AspectAnalysisResponse(BaseModel):\n    aspect: str = Field(..., min_length=1, description=\"Aspekt ad\u0131\")\n    sentiment: str = Field(..., regex=\"^(positive|negative|neutral)$\")\n    score: float = Field(..., ge=0.0, le=1.0, description=\"G\u00fcven skoru\")\n    quote: str = Field(..., min_length=1, description=\"Metinden al\u0131nt\u0131\")\n</code></pre>"},{"location":"tr/api/response-models/#serilestirme","title":"Serile\u015ftirme","text":""},{"location":"tr/api/response-models/#json-serilestirme","title":"JSON Serile\u015ftirme","text":"<pre><code># Model'i JSON'a \u00e7evir\nresponse = ABSAResponse(...)\njson_data = response.model_dump()\n\n# JSON'dan model olu\u015ftur\njson_str = '{\"id\": \"123\", \"polarity\": \"positive\", ...}'\nresponse = ABSAResponse.model_validate_json(json_str)\n</code></pre>"},{"location":"tr/api/response-models/#dict-serilestirme","title":"Dict Serile\u015ftirme","text":"<pre><code># Model'i dict'e \u00e7evir\nresponse = ABSAResponse(...)\ndict_data = response.model_dump()\n\n# Dict'den model olu\u015ftur\ndict_data = {\"id\": \"123\", \"polarity\": \"positive\", ...}\nresponse = ABSAResponse.model_validate(dict_data)\n</code></pre>"},{"location":"tr/api/response-models/#hata-modelleri","title":"Hata Modelleri","text":""},{"location":"tr/api/response-models/#validationerror","title":"ValidationError","text":"<pre><code>class ValidationError(BaseModel):\n    error: str\n    details: List[str]\n    timestamp: datetime\n</code></pre>"},{"location":"tr/api/response-models/#ornek_4","title":"\u00d6rnek","text":"<pre><code>{\n  \"error\": \"Validation Error\",\n  \"details\": [\n    \"polarity must be one of: positive, negative, neutral\",\n    \"score must be between 0.0 and 1.0\"\n  ],\n  \"timestamp\": \"2024-01-15T10:30:45Z\"\n}\n</code></pre>"},{"location":"tr/api/response-models/#apierror","title":"APIError","text":"<pre><code>class APIError(BaseModel):\n    error: str\n    message: str\n    status_code: int\n    timestamp: datetime\n</code></pre>"},{"location":"tr/api/response-models/#ornek_5","title":"\u00d6rnek","text":"<pre><code>{\n  \"error\": \"Internal Server Error\",\n  \"message\": \"An unexpected error occurred\",\n  \"status_code\": 500,\n  \"timestamp\": \"2024-01-15T10:30:45Z\"\n}\n</code></pre>"},{"location":"tr/api/response-models/#ornek-kullanm","title":"\u00d6rnek Kullan\u0131m","text":""},{"location":"tr/api/response-models/#model-olusturma","title":"Model Olu\u015fturma","text":"<pre><code>from app.schemas.response.absa_response import ABSAResponse\nfrom app.schemas.response.aspect_response import AspectAnalysisResponse\n\n# Aspekt olu\u015ftur\naspect = AspectAnalysisResponse(\n    aspect=\"kamera\",\n    sentiment=\"positive\",\n    score=0.95,\n    quote=\"kamera harika\"\n)\n\n# Ana yan\u0131t olu\u015ftur\nresponse = ABSAResponse(\n    id=\"123e4567-e89b-12d3-a456-426614174000\",\n    polarity=\"positive\",\n    score=0.8,\n    aspects=[aspect],\n    message=\"Analiz tamamland\u0131\",\n    text=\"Bu telefonun kameras\u0131 harika.\"\n)\n</code></pre>"},{"location":"tr/api/response-models/#model-dogrulama","title":"Model Do\u011frulama","text":"<pre><code># Ge\u00e7ersiz veri ile test\ntry:\n    invalid_response = ABSAResponse(\n        id=\"123\",\n        polarity=\"invalid\",  # Ge\u00e7ersiz de\u011fer\n        score=1.5,          # Ge\u00e7ersiz de\u011fer\n        aspects=[],\n        message=\"\",\n        text=\"\"\n    )\nexcept ValidationError as e:\n    print(f\"Do\u011frulama hatas\u0131: {e}\")\n</code></pre>"},{"location":"tr/api/response-models/#json-donusumu","title":"JSON D\u00f6n\u00fc\u015f\u00fcm\u00fc","text":"<pre><code># Model'i JSON'a \u00e7evir\njson_data = response.model_dump()\nprint(json.dumps(json_data, indent=2, ensure_ascii=False))\n\n# JSON'dan model olu\u015ftur\njson_str = json.dumps(json_data)\nnew_response = ABSAResponse.model_validate_json(json_str)\n</code></pre>"},{"location":"tr/api/response-models/#en-iyi-uygulamalar","title":"En \u0130yi Uygulamalar","text":""},{"location":"tr/api/response-models/#model-tasarm","title":"Model Tasar\u0131m\u0131","text":"<ol> <li>Tip G\u00fcvenli\u011fi: G\u00fc\u00e7l\u00fc tip tan\u0131mlar\u0131 kullan\u0131n</li> <li>Do\u011frulama: Uygun do\u011frulama kurallar\u0131 ekleyin</li> <li>Dok\u00fcmantasyon: Her alan i\u00e7in a\u00e7\u0131klama ekleyin</li> <li>Varsay\u0131lanlar: Makul varsay\u0131lan de\u011ferler sa\u011flay\u0131n</li> </ol>"},{"location":"tr/api/response-models/#performans","title":"Performans","text":"<ol> <li>Lazy Loading: Modelleri gerekti\u011finde y\u00fckleyin</li> <li>Caching: S\u0131k kullan\u0131lan modelleri \u00f6nbelle\u011fe al\u0131n</li> <li>Serialization: Verimli serile\u015ftirme kullan\u0131n</li> <li>Memory: Bellek kullan\u0131m\u0131n\u0131 izleyin</li> </ol>"},{"location":"tr/api/response-models/#guvenlik","title":"G\u00fcvenlik","text":"<ol> <li>Input Validation: Giri\u015f verilerini do\u011frulay\u0131n</li> <li>Sensitive Data: Hassas bilgileri maskeleyin</li> <li>Error Handling: Hata mesajlar\u0131nda hassas bilgi g\u00f6stermeyin</li> <li>Rate Limiting: API kullan\u0131m\u0131n\u0131 s\u0131n\u0131rlay\u0131n</li> </ol>"},{"location":"tr/architecture/core/","title":"\u00c7ekirdek Mod\u00fcller","text":"<p>Aspectify'in \u00e7ekirdek mod\u00fclleri, uygulaman\u0131n temel yap\u0131land\u0131rma ve loglama i\u015flevlerini sa\u011flar.</p>"},{"location":"tr/architecture/core/#config-modulu","title":"Config Mod\u00fcl\u00fc","text":"<p><code>app/core/config.py</code> dosyas\u0131, uygulaman\u0131n merkezi yap\u0131land\u0131rma sistemini i\u00e7erir.</p>"},{"location":"tr/architecture/core/#settings-snf","title":"Settings S\u0131n\u0131f\u0131","text":"<pre><code>from pydantic_settings import BaseSettings, SettingsConfigDict\nfrom pydantic import SecretStr\n\nclass Settings(BaseSettings):\n    model_config = SettingsConfigDict(env_file=\".env\", extra=\"ignore\")\n\n    PROJECT_NAME: str = \"Aspectify\"\n    PROJECT_VERSION: str = \"1.0.0\"\n    LOG_LEVEL: str = \"INFO\"\n    GOOGLE_API_KEY: SecretStr | None = None\n    GEMINI_1_5_FLASH_MODEL: str = \"gemini-1.5-flash\"\n</code></pre>"},{"location":"tr/architecture/core/#ozellikler","title":"\u00d6zellikler","text":"<ul> <li>Pydantic Tabanl\u0131: G\u00fc\u00e7l\u00fc veri do\u011frulama</li> <li>Ortam De\u011fi\u015fkenleri: <code>.env</code> dosyas\u0131 deste\u011fi</li> <li>Gizli Veriler: API anahtarlar\u0131 i\u00e7in g\u00fcvenli i\u015fleme</li> <li>Varsay\u0131lan De\u011ferler: Makul varsay\u0131lanlar</li> <li>Tip G\u00fcvenli\u011fi: Statik tip kontrol\u00fc</li> </ul>"},{"location":"tr/architecture/core/#kullanm","title":"Kullan\u0131m","text":"<pre><code>from app.core.config import settings\n\n# Temel ayarlar\nprint(f\"Proje: {settings.PROJECT_NAME}\")\nprint(f\"S\u00fcr\u00fcm: {settings.PROJECT_VERSION}\")\n\n# Gizli de\u011ferler\nif settings.GOOGLE_API_KEY:\n    api_key = settings.GOOGLE_API_KEY.get_secret_value()\n</code></pre>"},{"location":"tr/architecture/core/#logging-config-modulu","title":"Logging Config Mod\u00fcl\u00fc","text":"<p><code>app/core/logging_config.py</code> dosyas\u0131, uygulaman\u0131n loglama sistemini yap\u0131land\u0131r\u0131r.</p>"},{"location":"tr/architecture/core/#logging-yaplandrmas","title":"Logging Yap\u0131land\u0131rmas\u0131","text":"<pre><code>import logging\nimport os\nfrom app.core.config import settings\n\ndef setup_logging():\n    log_level = settings.LOG_LEVEL.upper()\n\n    # Logs dizini olu\u015ftur\n    os.makedirs(\"logs\", exist_ok=True)\n\n    # Loglama yap\u0131land\u0131rmas\u0131\n    logging.basicConfig(\n        level=log_level,\n        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n        handlers=[\n            logging.FileHandler('logs/app.log', encoding='utf-8')\n        ]\n    )\n\n    logger = logging.getLogger(__name__)\n    logger.info(f\"Logging initialized with level: {log_level}\")\n    return logger\n\nlogger = setup_logging()\n</code></pre>"},{"location":"tr/architecture/core/#ozellikler_1","title":"\u00d6zellikler","text":"<ul> <li>Dosya Tabanl\u0131: Loglar <code>logs/app.log</code> dosyas\u0131na yaz\u0131l\u0131r</li> <li>UTF-8 Deste\u011fi: T\u00fcrk\u00e7e karakter deste\u011fi</li> <li>Yap\u0131land\u0131r\u0131labilir Seviye: Ortam de\u011fi\u015fkeni ile kontrol</li> <li>Otomatik Dizin: <code>logs</code> dizini otomatik olu\u015fturulur</li> <li>Timestamp: Her log giri\u015fi zaman damgas\u0131 i\u00e7erir</li> </ul>"},{"location":"tr/architecture/core/#log-seviyeleri","title":"Log Seviyeleri","text":"<pre><code># Farkl\u0131 log seviyeleri\nlogger.debug(\"Hata ay\u0131klama bilgisi\")\nlogger.info(\"Genel bilgi\")\nlogger.warning(\"Uyar\u0131 mesaj\u0131\")\nlogger.error(\"Hata mesaj\u0131\")\nlogger.critical(\"Kritik hata\")\n</code></pre>"},{"location":"tr/architecture/core/#log-format","title":"Log Format\u0131","text":"<pre><code>2024-01-15 10:30:45,123 - app.agents.absa_agent - INFO - ABSA analizi ba\u015flat\u0131ld\u0131\n2024-01-15 10:30:46,456 - app.tools.absa_analyzer - DEBUG - Metin i\u015flendi: \"Bu \u00fcr\u00fcn harika...\"\n2024-01-15 10:30:47,789 - app.agents.absa_agent - INFO - Analiz tamamland\u0131\n</code></pre>"},{"location":"tr/architecture/core/#ortam-yaplandrmas","title":"Ortam Yap\u0131land\u0131rmas\u0131","text":""},{"location":"tr/architecture/core/#env-dosyas","title":".env Dosyas\u0131","text":"<pre><code># Google API Yap\u0131land\u0131rmas\u0131\nGOOGLE_API_KEY=your_google_api_key_here\n\n# Uygulama Ayarlar\u0131\nPROJECT_NAME=Aspectify\nPROJECT_VERSION=1.0.0\nLOG_LEVEL=INFO\n\n# AI Model Yap\u0131land\u0131rmas\u0131\nGEMINI_1_5_FLASH_MODEL=gemini-1.5-flash\n</code></pre>"},{"location":"tr/architecture/core/#ortam-spesifik-yaplandrma","title":"Ortam-Spesifik Yap\u0131land\u0131rma","text":"<pre><code># Geli\u015ftirme ortam\u0131\n.env.development\n\n# \u00dcretim ortam\u0131\n.env.production\n\n# Test ortam\u0131\n.env.testing\n</code></pre>"},{"location":"tr/architecture/core/#guvenlik","title":"G\u00fcvenlik","text":""},{"location":"tr/architecture/core/#api-anahtar-yonetimi","title":"API Anahtar\u0131 Y\u00f6netimi","text":"<pre><code># G\u00fcvenli API anahtar\u0131 kullan\u0131m\u0131\nif settings.GOOGLE_API_KEY:\n    # Gizli de\u011feri g\u00fcvenli \u015fekilde al\n    api_key = settings.GOOGLE_API_KEY.get_secret_value()\n\n    # Ortam de\u011fi\u015fkeni olarak ayarla\n    os.environ[\"GOOGLE_API_KEY\"] = api_key\n</code></pre>"},{"location":"tr/architecture/core/#log-guvenligi","title":"Log G\u00fcvenli\u011fi","text":"<pre><code># Hassas bilgileri loglamaktan ka\u00e7\u0131n\nlogger.info(f\"API \u00e7a\u011fr\u0131s\u0131 yap\u0131ld\u0131: {endpoint}\")\n# \u274c logger.info(f\"API anahtar\u0131: {api_key}\")  # Yapma!\n</code></pre>"},{"location":"tr/architecture/core/#hata-yonetimi","title":"Hata Y\u00f6netimi","text":""},{"location":"tr/architecture/core/#yaplandrma-hatalar","title":"Yap\u0131land\u0131rma Hatalar\u0131","text":"<pre><code>try:\n    from app.core.config import settings\n    if not settings.GOOGLE_API_KEY:\n        raise ValueError(\"GOOGLE_API_KEY gerekli\")\nexcept Exception as e:\n    logger.error(f\"Yap\u0131land\u0131rma hatas\u0131: {e}\")\n    raise\n</code></pre>"},{"location":"tr/architecture/core/#loglama-hatalar","title":"Loglama Hatalar\u0131","text":"<pre><code>try:\n    logger.info(\"\u0130\u015flem ba\u015flat\u0131ld\u0131\")\n    # \u0130\u015flem kodlar\u0131\n    logger.info(\"\u0130\u015flem tamamland\u0131\")\nexcept Exception as e:\n    logger.error(f\"\u0130\u015flem hatas\u0131: {e}\")\n    raise\n</code></pre>"},{"location":"tr/architecture/core/#performans","title":"Performans","text":""},{"location":"tr/architecture/core/#lazy-loading","title":"Lazy Loading","text":"<pre><code># Yap\u0131land\u0131rma sadece gerekti\u011finde y\u00fcklenir\nsettings = Settings()  # Sadece ilk kullan\u0131mda y\u00fcklenir\n</code></pre>"},{"location":"tr/architecture/core/#log-rotation","title":"Log Rotation","text":"<pre><code>from logging.handlers import RotatingFileHandler\n\n# Log dosyas\u0131 d\u00f6nd\u00fcrme\nhandler = RotatingFileHandler(\n    'logs/app.log',\n    maxBytes=10*1024*1024,  # 10MB\n    backupCount=5\n)\n</code></pre>"},{"location":"tr/architecture/core/#test","title":"Test","text":""},{"location":"tr/architecture/core/#yaplandrma-testleri","title":"Yap\u0131land\u0131rma Testleri","text":"<pre><code>def test_settings():\n    # Test ortam\u0131 i\u00e7in yap\u0131land\u0131rma\n    os.environ[\"LOG_LEVEL\"] = \"DEBUG\"\n    settings = Settings()\n    assert settings.LOG_LEVEL == \"DEBUG\"\n</code></pre>"},{"location":"tr/architecture/core/#loglama-testleri","title":"Loglama Testleri","text":"<pre><code>def test_logging():\n    # Log dosyas\u0131n\u0131n olu\u015fturuldu\u011funu kontrol et\n    assert os.path.exists(\"logs/app.log\")\n\n    # Log i\u00e7eri\u011fini kontrol et\n    with open(\"logs/app.log\", \"r\") as f:\n        content = f.read()\n        assert \"Logging initialized\" in content\n</code></pre>"},{"location":"tr/architecture/core/#en-iyi-uygulamalar","title":"En \u0130yi Uygulamalar","text":""},{"location":"tr/architecture/core/#yaplandrma","title":"Yap\u0131land\u0131rma","text":"<ol> <li>Varsay\u0131lan De\u011ferler: Her ayar i\u00e7in makul varsay\u0131lanlar sa\u011flay\u0131n</li> <li>Tip Do\u011frulama: Pydantic ile g\u00fc\u00e7l\u00fc tip kontrol\u00fc</li> <li>Gizli Veriler: Hassas bilgileri SecretStr ile koruyun</li> <li>Dok\u00fcmantasyon: Her ayar i\u00e7in a\u00e7\u0131klama ekleyin</li> </ol>"},{"location":"tr/architecture/core/#loglama","title":"Loglama","text":"<ol> <li>Uygun Seviye: Do\u011fru log seviyesini kullan\u0131n</li> <li>Yap\u0131land\u0131r\u0131labilir: Ortam de\u011fi\u015fkeni ile kontrol edilebilir</li> <li>Performans: Loglama performans\u0131 etkilememeli</li> <li>G\u00fcvenlik: Hassas bilgileri loglamay\u0131n</li> </ol>"},{"location":"tr/architecture/core/#hata-yonetimi_1","title":"Hata Y\u00f6netimi","text":"<ol> <li>Erken Kontrol: Yap\u0131land\u0131rma hatalar\u0131n\u0131 erken yakalay\u0131n</li> <li>A\u00e7\u0131klay\u0131c\u0131 Mesajlar: Hata mesajlar\u0131 a\u00e7\u0131k ve anla\u015f\u0131l\u0131r olsun</li> <li>Graceful Degradation: Hata durumunda uygulama \u00e7\u00f6kmesin</li> <li>Monitoring: Hatalar\u0131 izleyin ve raporlay\u0131n</li> </ol>"},{"location":"tr/architecture/overview/","title":"Sistem Mimarisi","text":"<p>Aspectify, modern Python mimarisi kullanarak geli\u015ftirilmi\u015f bir duygu analizi platformudur.</p>"},{"location":"tr/architecture/overview/#genel-mimari","title":"Genel Mimari","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Aspectify Platform                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  API Layer (FastAPI)                                       \u2502\n\u2502  \u251c\u2500\u2500 Endpoints                                             \u2502\n\u2502  \u251c\u2500\u2500 Request/Response Models                               \u2502\n\u2502  \u2514\u2500\u2500 Authentication                                        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Business Logic Layer                                      \u2502\n\u2502  \u251c\u2500\u2500 Agents (ABSA Agent)                                  \u2502\n\u2502  \u251c\u2500\u2500 Services                                             \u2502\n\u2502  \u2514\u2500\u2500 Tools                                                \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  AI/ML Layer                                              \u2502\n\u2502  \u251c\u2500\u2500 LLM Models (Gemini)                                  \u2502\n\u2502  \u251c\u2500\u2500 Transcription (Whisper)                              \u2502\n\u2502  \u2514\u2500\u2500 Language Detection                                   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Data Layer                                               \u2502\n\u2502  \u251c\u2500\u2500 Database (PostgreSQL)                                \u2502\n\u2502  \u251c\u2500\u2500 Vector Database (Pinecone)                           \u2502\n\u2502  \u2514\u2500\u2500 File Storage                                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"tr/architecture/overview/#modul-yaps","title":"Mod\u00fcl Yap\u0131s\u0131","text":""},{"location":"tr/architecture/overview/#core-cekirdek","title":"\ud83c\udfd7\ufe0f Core (\u00c7ekirdek)","text":"<pre><code>app/core/\n\u251c\u2500\u2500 config.py          # Yap\u0131land\u0131rma y\u00f6netimi\n\u2514\u2500\u2500 logging_config.py  # Loglama yap\u0131land\u0131rmas\u0131\n</code></pre> <p>Sorumluluklar: - Uygulama yap\u0131land\u0131rmas\u0131 - Ortam de\u011fi\u015fkenleri y\u00f6netimi - Loglama sistemi</p>"},{"location":"tr/architecture/overview/#agents-ajanlar","title":"\ud83e\udd16 Agents (Ajanlar)","text":"<pre><code>app/agents/\n\u2514\u2500\u2500 absa_agent.py      # Ana ABSA analiz ajan\u0131\n</code></pre> <p>Sorumluluklar: - \u0130\u015f ak\u0131\u015f\u0131 y\u00f6netimi - Veri i\u015fleme koordinasyonu - Sonu\u00e7 formatlama</p>"},{"location":"tr/architecture/overview/#ai-models-ai-modelleri","title":"\ud83e\udde0 AI Models (AI Modelleri)","text":"<pre><code>app/ai_models/\n\u251c\u2500\u2500 llm_models.py           # LLM model y\u00f6netimi\n\u2514\u2500\u2500 openai_whisper_models.py # Whisper model y\u00f6netimi\n</code></pre> <p>Sorumluluklar: - AI model ba\u011flant\u0131lar\u0131 - Model yap\u0131land\u0131rmas\u0131 - API y\u00f6netimi</p>"},{"location":"tr/architecture/overview/#logic-mantk","title":"\ud83d\udd27 Logic (Mant\u0131k)","text":"<pre><code>app/logic/\n\u251c\u2500\u2500 content_type_identifier.py  # \u0130\u00e7erik t\u00fcr\u00fc belirleme\n\u251c\u2500\u2500 language_detector.py        # Dil tespiti\n\u2514\u2500\u2500 transcriber.py              # Ses transkripsiyonu\n</code></pre> <p>Sorumluluklar: - \u0130\u00e7erik t\u00fcr\u00fc analizi - Dil tespiti - Ses dosyas\u0131 i\u015fleme</p>"},{"location":"tr/architecture/overview/#tools-araclar","title":"\ud83d\udee0\ufe0f Tools (Ara\u00e7lar)","text":"<pre><code>app/tools/\n\u2514\u2500\u2500 absa_analyzer.py    # ABSA analiz arac\u0131\n</code></pre> <p>Sorumluluklar: - Duygu analizi i\u015flemi - Aspekt \u00e7\u0131karma - Sonu\u00e7 formatlama</p>"},{"location":"tr/architecture/overview/#schemas-semalar","title":"\ud83d\udccb Schemas (\u015eemalar)","text":"<pre><code>app/schemas/\n\u251c\u2500\u2500 request/\n\u2502   \u2514\u2500\u2500 multi_modal_request.py  # \u0130stek modelleri\n\u2514\u2500\u2500 response/\n    \u251c\u2500\u2500 absa_response.py        # ABSA yan\u0131t modeli\n    \u251c\u2500\u2500 aspect_response.py      # Aspekt yan\u0131t modeli\n    \u2514\u2500\u2500 llm_response.py         # LLM yan\u0131t modeli\n</code></pre> <p>Sorumluluklar: - Veri do\u011frulama - API s\u00f6zle\u015fmeleri - Tip g\u00fcvenli\u011fi</p>"},{"location":"tr/architecture/overview/#veri-aks","title":"Veri Ak\u0131\u015f\u0131","text":""},{"location":"tr/architecture/overview/#1-giris-isleme","title":"1. Giri\u015f \u0130\u015fleme","text":"<pre><code>Kullan\u0131c\u0131 Giri\u015fi \u2192 \u0130\u00e7erik T\u00fcr\u00fc Belirleme \u2192 Dil Tespiti\n</code></pre>"},{"location":"tr/architecture/overview/#2-icerik-hazrlama","title":"2. \u0130\u00e7erik Haz\u0131rlama","text":"<pre><code>Ses Dosyas\u0131 \u2192 Transkripsiyon \u2192 Metin\nMetin \u2192 Do\u011frudan \u0130\u015fleme\n</code></pre>"},{"location":"tr/architecture/overview/#3-analiz-sureci","title":"3. Analiz S\u00fcreci","text":"<pre><code>Metin \u2192 ABSA Arac\u0131 \u2192 LLM Model \u2192 Sonu\u00e7\n</code></pre>"},{"location":"tr/architecture/overview/#4-sonuc-formatlama","title":"4. Sonu\u00e7 Formatlama","text":"<pre><code>Ham Sonu\u00e7 \u2192 Pydantic Model \u2192 JSON Yan\u0131t\n</code></pre>"},{"location":"tr/architecture/overview/#teknoloji-ygn","title":"Teknoloji Y\u0131\u011f\u0131n\u0131","text":""},{"location":"tr/architecture/overview/#backend","title":"Backend","text":"<ul> <li>Python 3.8+: Ana programlama dili</li> <li>FastAPI: Web framework</li> <li>Pydantic: Veri do\u011frulama</li> <li>SQLAlchemy: ORM</li> <li>PostgreSQL: Ana veritaban\u0131</li> </ul>"},{"location":"tr/architecture/overview/#aiml","title":"AI/ML","text":"<ul> <li>Google Gemini: LLM modeli</li> <li>OpenAI Whisper: Ses transkripsiyonu</li> <li>LangChain: AI framework</li> <li>Pinecone: Vekt\u00f6r veritaban\u0131</li> </ul>"},{"location":"tr/architecture/overview/#altyap","title":"Altyap\u0131","text":"<ul> <li>Docker: Konteynerle\u015ftirme</li> <li>MkDocs: Dok\u00fcmantasyon</li> <li>GitHub Actions: CI/CD</li> <li>GitHub Pages: Dok\u00fcmantasyon hosting</li> </ul>"},{"location":"tr/architecture/overview/#guvenlik","title":"G\u00fcvenlik","text":""},{"location":"tr/architecture/overview/#api-guvenligi","title":"API G\u00fcvenli\u011fi","text":"<ul> <li>API anahtar\u0131 y\u00f6netimi</li> <li>Rate limiting</li> <li>Input validation</li> <li>Error handling</li> </ul>"},{"location":"tr/architecture/overview/#veri-guvenligi","title":"Veri G\u00fcvenli\u011fi","text":"<ul> <li>\u015eifreli ba\u011flant\u0131lar</li> <li>Hassas veri maskeleme</li> <li>Log g\u00fcvenli\u011fi</li> <li>Backup stratejileri</li> </ul>"},{"location":"tr/architecture/overview/#olceklenebilirlik","title":"\u00d6l\u00e7eklenebilirlik","text":""},{"location":"tr/architecture/overview/#yatay-olcekleme","title":"Yatay \u00d6l\u00e7ekleme","text":"<ul> <li>Mikroservis mimarisi</li> <li>Load balancing</li> <li>Database sharding</li> <li>Cache katmanlar\u0131</li> </ul>"},{"location":"tr/architecture/overview/#dikey-olcekleme","title":"Dikey \u00d6l\u00e7ekleme","text":"<ul> <li>Kaynak optimizasyonu</li> <li>Model optimizasyonu</li> <li>Memory management</li> <li>CPU utilization</li> </ul>"},{"location":"tr/architecture/overview/#performans","title":"Performans","text":""},{"location":"tr/architecture/overview/#optimizasyon-stratejileri","title":"Optimizasyon Stratejileri","text":"<ul> <li>Asenkron i\u015fleme</li> <li>Connection pooling</li> <li>Caching mechanisms</li> <li>Batch processing</li> </ul>"},{"location":"tr/architecture/overview/#izleme","title":"\u0130zleme","text":"<ul> <li>Application metrics</li> <li>Performance monitoring</li> <li>Error tracking</li> <li>Resource utilization</li> </ul>"},{"location":"tr/architecture/overview/#gelecek-planlar","title":"Gelecek Planlar\u0131","text":""},{"location":"tr/architecture/overview/#ksa-vadeli","title":"K\u0131sa Vadeli","text":"<ul> <li> API rate limiting</li> <li> Caching layer</li> <li> Batch processing</li> <li> Web UI</li> </ul>"},{"location":"tr/architecture/overview/#uzun-vadeli","title":"Uzun Vadeli","text":"<ul> <li> Multi-tenant support</li> <li> Real-time streaming</li> <li> Advanced analytics</li> <li> Mobile SDK</li> </ul>"},{"location":"tr/deployment/environment/","title":"Ortam Kurulumu","text":"<p>Aspectify'i farkl\u0131 ortamlarda (geli\u015ftirme, test, \u00fcretim) kurmak i\u00e7in rehber.</p>"},{"location":"tr/deployment/environment/#ortam-turleri","title":"Ortam T\u00fcrleri","text":""},{"location":"tr/deployment/environment/#gelistirme-ortam-development","title":"Geli\u015ftirme Ortam\u0131 (Development)","text":"<p>Yerel geli\u015ftirme i\u00e7in optimize edilmi\u015f ortam.</p>"},{"location":"tr/deployment/environment/#test-ortam-testing","title":"Test Ortam\u0131 (Testing)","text":"<p>Otomatik testler ve entegrasyon testleri i\u00e7in.</p>"},{"location":"tr/deployment/environment/#uretim-ortam-production","title":"\u00dcretim Ortam\u0131 (Production)","text":"<p>Canl\u0131 kullan\u0131c\u0131lar i\u00e7in optimize edilmi\u015f ortam.</p>"},{"location":"tr/deployment/environment/#gelistirme-ortam","title":"Geli\u015ftirme Ortam\u0131","text":""},{"location":"tr/deployment/environment/#kurulum","title":"Kurulum","text":"<pre><code># Projeyi klonla\ngit clone https://github.com/your-username/aspectify.git\ncd aspectify\n\n# Sanal ortam olu\u015ftur\npython -m venv .venv\nsource .venv/bin/activate  # Linux/macOS\n# .venv\\Scripts\\activate   # Windows\n\n# Ba\u011f\u0131ml\u0131l\u0131klar\u0131 y\u00fckle\npip install -r requirements.txt\n</code></pre>"},{"location":"tr/deployment/environment/#yaplandrma","title":"Yap\u0131land\u0131rma","text":"<p><code>.env.development</code> dosyas\u0131 olu\u015fturun:</p> <pre><code># Geli\u015ftirme ortam\u0131 ayarlar\u0131\nENVIRONMENT=development\nDEBUG=true\nLOG_LEVEL=DEBUG\n\n# Google API\nGOOGLE_API_KEY=your_development_api_key\n\n# Veritaban\u0131 (yerel)\nDATABASE_URL=postgresql://aspectify:password@localhost:5432/aspectify_dev\n\n# Pinecone (iste\u011fe ba\u011fl\u0131)\nPINECONE_API_KEY=your_development_pinecone_key\nPINECONE_ENVIRONMENT=us-west1-gcp\nPINECONE_INDEX_NAME=aspectify-dev-index\n\n# Uygulama ayarlar\u0131\nPROJECT_NAME=Aspectify-Dev\nPROJECT_VERSION=1.0.0-dev\n</code></pre>"},{"location":"tr/deployment/environment/#calstrma","title":"\u00c7al\u0131\u015ft\u0131rma","text":"<pre><code># Geli\u015ftirme sunucusu\nuvicorn app.main:app --reload --host 0.0.0.0 --port 8000\n\n# Test \u00e7al\u0131\u015ft\u0131rma\npython main.py\n\n# Test suite\npytest tests/\n</code></pre>"},{"location":"tr/deployment/environment/#test-ortam","title":"Test Ortam\u0131","text":""},{"location":"tr/deployment/environment/#kurulum_1","title":"Kurulum","text":"<pre><code># Test ortam\u0131 i\u00e7in ayr\u0131 sanal ortam\npython -m venv .venv-test\nsource .venv-test/bin/activate\n\n# Test ba\u011f\u0131ml\u0131l\u0131klar\u0131\npip install -r requirements.txt\npip install pytest pytest-asyncio pytest-cov\n</code></pre>"},{"location":"tr/deployment/environment/#yaplandrma_1","title":"Yap\u0131land\u0131rma","text":"<p><code>.env.testing</code> dosyas\u0131 olu\u015fturun:</p> <pre><code># Test ortam\u0131 ayarlar\u0131\nENVIRONMENT=testing\nDEBUG=false\nLOG_LEVEL=WARNING\n\n# Google API (test anahtar\u0131)\nGOOGLE_API_KEY=your_test_api_key\n\n# Test veritaban\u0131\nDATABASE_URL=postgresql://aspectify:password@localhost:5432/aspectify_test\n\n# Pinecone (test index)\nPINECONE_API_KEY=your_test_pinecone_key\nPINECONE_ENVIRONMENT=us-west1-gcp\nPINECONE_INDEX_NAME=aspectify-test-index\n\n# Uygulama ayarlar\u0131\nPROJECT_NAME=Aspectify-Test\nPROJECT_VERSION=1.0.0-test\n</code></pre>"},{"location":"tr/deployment/environment/#test-veritaban","title":"Test Veritaban\u0131","text":"<pre><code>-- Test veritaban\u0131 olu\u015ftur\nCREATE DATABASE aspectify_test OWNER aspectify;\n\n-- Test verilerini y\u00fckle\npsql -U aspectify -d aspectify_test -f tests/fixtures/test_data.sql\n</code></pre>"},{"location":"tr/deployment/environment/#test-calstrma","title":"Test \u00c7al\u0131\u015ft\u0131rma","text":"<pre><code># T\u00fcm testler\npytest\n\n# Belirli test dosyas\u0131\npytest tests/unit/test_absa_agent.py\n\n# Coverage raporu\npytest --cov=app --cov-report=html\n\n# Asenkron testler\npytest tests/integration/test_e2e_flow.py -v\n</code></pre>"},{"location":"tr/deployment/environment/#uretim-ortam","title":"\u00dcretim Ortam\u0131","text":""},{"location":"tr/deployment/environment/#sunucu-gereksinimleri","title":"Sunucu Gereksinimleri","text":"<ul> <li>OS: Ubuntu 20.04 LTS veya \u00fczeri</li> <li>CPU: 4 \u00e7ekirdek, 3.0 GHz</li> <li>RAM: 8 GB</li> <li>Disk: 50 GB SSD</li> <li>A\u011f: 1 Gbps</li> </ul>"},{"location":"tr/deployment/environment/#kurulum_2","title":"Kurulum","text":"<pre><code># Sistem g\u00fcncellemeleri\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Gerekli paketler\nsudo apt install -y python3.8 python3.8-venv python3-pip\nsudo apt install -y postgresql postgresql-contrib\nsudo apt install -y nginx certbot python3-certbot-nginx\nsudo apt install -y git curl wget\n\n# Uygulama kullan\u0131c\u0131s\u0131\nsudo useradd -m -s /bin/bash aspectify\nsudo usermod -aG sudo aspectify\n</code></pre>"},{"location":"tr/deployment/environment/#uygulama-kurulumu","title":"Uygulama Kurulumu","text":"<pre><code># Uygulama dizini\nsudo mkdir -p /opt/aspectify\nsudo chown aspectify:aspectify /opt/aspectify\n\n# Projeyi klonla\ncd /opt/aspectify\nsudo -u aspectify git clone https://github.com/your-username/aspectify.git .\n\n# Sanal ortam\nsudo -u aspectify python3.8 -m venv .venv\nsudo -u aspectify .venv/bin/pip install -r requirements.txt\n</code></pre>"},{"location":"tr/deployment/environment/#yaplandrma_2","title":"Yap\u0131land\u0131rma","text":"<p><code>.env.production</code> dosyas\u0131 olu\u015fturun:</p> <pre><code># \u00dcretim ortam\u0131 ayarlar\u0131\nENVIRONMENT=production\nDEBUG=false\nLOG_LEVEL=INFO\n\n# Google API\nGOOGLE_API_KEY=your_production_api_key\n\n# Veritaban\u0131\nDATABASE_URL=postgresql://aspectify:strong_password@localhost:5432/aspectify_prod\n\n# Pinecone\nPINECONE_API_KEY=your_production_pinecone_key\nPINECONE_ENVIRONMENT=us-west1-gcp\nPINECONE_INDEX_NAME=aspectify-prod-index\n\n# Uygulama ayarlar\u0131\nPROJECT_NAME=Aspectify\nPROJECT_VERSION=1.0.0\n\n# G\u00fcvenlik\nSECRET_KEY=your_secret_key_here\nALLOWED_HOSTS=yourdomain.com,www.yourdomain.com\n</code></pre>"},{"location":"tr/deployment/environment/#veritaban-kurulumu","title":"Veritaban\u0131 Kurulumu","text":"<pre><code>-- \u00dcretim veritaban\u0131\nCREATE DATABASE aspectify_prod OWNER aspectify;\n\n-- G\u00fcvenlik ayarlar\u0131\nALTER USER aspectify PASSWORD 'strong_password';\nREVOKE ALL ON SCHEMA public FROM PUBLIC;\nGRANT ALL ON SCHEMA public TO aspectify;\n</code></pre>"},{"location":"tr/deployment/environment/#systemd-servisi","title":"Systemd Servisi","text":"<p><code>/etc/systemd/system/aspectify.service</code> dosyas\u0131:</p> <pre><code>[Unit]\nDescription=Aspectify API Service\nAfter=network.target postgresql.service\n\n[Service]\nType=exec\nUser=aspectify\nGroup=aspectify\nWorkingDirectory=/opt/aspectify\nEnvironment=PATH=/opt/aspectify/.venv/bin\nExecStart=/opt/aspectify/.venv/bin/uvicorn app.main:app --host 0.0.0.0 --port 8000\nRestart=always\nRestartSec=10\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"tr/deployment/environment/#nginx-yaplandrmas","title":"Nginx Yap\u0131land\u0131rmas\u0131","text":"<p><code>/etc/nginx/sites-available/aspectify</code> dosyas\u0131:</p> <pre><code>server {\n    listen 80;\n    server_name yourdomain.com www.yourdomain.com;\n\n    location / {\n        proxy_pass http://127.0.0.1:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    location /static/ {\n        alias /opt/aspectify/static/;\n    }\n\n    location /logs/ {\n        alias /opt/aspectify/logs/;\n        auth_basic \"Restricted\";\n        auth_basic_user_file /etc/nginx/.htpasswd;\n    }\n}\n</code></pre>"},{"location":"tr/deployment/environment/#ssl-sertifikas","title":"SSL Sertifikas\u0131","text":"<pre><code># Let's Encrypt sertifikas\u0131\nsudo certbot --nginx -d yourdomain.com -d www.yourdomain.com\n\n# Otomatik yenileme\nsudo crontab -e\n# 0 12 * * * /usr/bin/certbot renew --quiet\n</code></pre>"},{"location":"tr/deployment/environment/#servisleri-baslatma","title":"Servisleri Ba\u015flatma","text":"<pre><code># Servisleri etkinle\u015ftir\nsudo systemctl enable aspectify\nsudo systemctl enable nginx\nsudo systemctl enable postgresql\n\n# Servisleri ba\u015flat\nsudo systemctl start aspectify\nsudo systemctl start nginx\nsudo systemctl start postgresql\n\n# Durum kontrol\u00fc\nsudo systemctl status aspectify\nsudo systemctl status nginx\nsudo systemctl status postgresql\n</code></pre>"},{"location":"tr/deployment/environment/#docker-kurulumu","title":"Docker Kurulumu","text":""},{"location":"tr/deployment/environment/#dockerfile","title":"Dockerfile","text":"<pre><code>FROM python:3.8-slim\n\nWORKDIR /app\n\n# Sistem ba\u011f\u0131ml\u0131l\u0131klar\u0131\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    gcc \\\n    g++ \\\n    libpq-dev \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Python ba\u011f\u0131ml\u0131l\u0131klar\u0131\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Uygulama kodu\nCOPY . .\n\n# Kullan\u0131c\u0131 olu\u015ftur\nRUN useradd -m aspectify &amp;&amp; chown -R aspectify:aspectify /app\nUSER aspectify\n\n# Port\nEXPOSE 8000\n\n# Ba\u015flatma komutu\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n</code></pre>"},{"location":"tr/deployment/environment/#docker-compose","title":"Docker Compose","text":"<p><code>docker-compose.yml</code> dosyas\u0131:</p> <pre><code>version: '3.8'\n\nservices:\n  app:\n    build: .\n    ports:\n      - \"8000:8000\"\n    environment:\n      - DATABASE_URL=postgresql://aspectify:password@db:5432/aspectify\n      - GOOGLE_API_KEY=${GOOGLE_API_KEY}\n    depends_on:\n      - db\n    volumes:\n      - ./logs:/app/logs\n\n  db:\n    image: postgres:13\n    environment:\n      - POSTGRES_USER=aspectify\n      - POSTGRES_PASSWORD=password\n      - POSTGRES_DB=aspectify\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    ports:\n      - \"5432:5432\"\n\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n      - ./ssl:/etc/nginx/ssl\n    depends_on:\n      - app\n\nvolumes:\n  postgres_data:\n</code></pre>"},{"location":"tr/deployment/environment/#docker-kullanm","title":"Docker Kullan\u0131m\u0131","text":"<pre><code># Geli\u015ftirme\ndocker-compose -f docker-compose.dev.yml up\n\n# \u00dcretim\ndocker-compose -f docker-compose.prod.yml up -d\n\n# Loglar\u0131 g\u00f6r\u00fcnt\u00fcle\ndocker-compose logs -f app\n\n# Servisleri durdur\ndocker-compose down\n</code></pre>"},{"location":"tr/deployment/environment/#monitoring-ve-loglama","title":"Monitoring ve Loglama","text":""},{"location":"tr/deployment/environment/#log-yonetimi","title":"Log Y\u00f6netimi","text":"<pre><code># Log rotation\nsudo nano /etc/logrotate.d/aspectify\n\n/opt/aspectify/logs/*.log {\n    daily\n    missingok\n    rotate 30\n    compress\n    delaycompress\n    notifempty\n    create 644 aspectify aspectify\n    postrotate\n        systemctl reload aspectify\n    endscript\n}\n</code></pre>"},{"location":"tr/deployment/environment/#monitoring","title":"Monitoring","text":"<pre><code># System monitoring\nsudo apt install htop iotop nethogs\n\n# Application monitoring\npip install prometheus-client\n\n# Health check endpoint\ncurl http://localhost:8000/health\n</code></pre>"},{"location":"tr/deployment/environment/#backup","title":"Backup","text":"<pre><code># Veritaban\u0131 yedekleme\npg_dump -U aspectify -h localhost aspectify_prod &gt; backup_$(date +%Y%m%d).sql\n\n# Otomatik yedekleme\nsudo crontab -e\n# 0 2 * * * /usr/bin/pg_dump -U aspectify -h localhost aspectify_prod &gt; /backup/aspectify_$(date +\\%Y\\%m\\%d).sql\n</code></pre>"},{"location":"tr/deployment/environment/#guvenlik","title":"G\u00fcvenlik","text":""},{"location":"tr/deployment/environment/#firewall","title":"Firewall","text":"<pre><code># UFW yap\u0131land\u0131rmas\u0131\nsudo ufw enable\nsudo ufw allow ssh\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw deny 5432/tcp\n</code></pre>"},{"location":"tr/deployment/environment/#ssltls","title":"SSL/TLS","text":"<pre><code># SSL sertifikas\u0131 kontrol\u00fc\nopenssl x509 -in /etc/letsencrypt/live/yourdomain.com/cert.pem -text -noout\n\n# SSL test\ncurl -I https://yourdomain.com\n</code></pre>"},{"location":"tr/deployment/environment/#guvenlik-guncellemeleri","title":"G\u00fcvenlik G\u00fcncellemeleri","text":"<pre><code># Otomatik g\u00fcvenlik g\u00fcncellemeleri\nsudo apt install unattended-upgrades\nsudo dpkg-reconfigure unattended-upgrades\n</code></pre>"},{"location":"tr/deployment/environment/#sorun-giderme","title":"Sorun Giderme","text":""},{"location":"tr/deployment/environment/#yaygn-sorunlar","title":"Yayg\u0131n Sorunlar","text":""},{"location":"tr/deployment/environment/#1-servis-baslamyor","title":"1. Servis Ba\u015flam\u0131yor","text":"<pre><code># Loglar\u0131 kontrol et\nsudo journalctl -u aspectify -f\n\n# Servis durumunu kontrol et\nsudo systemctl status aspectify\n\n# Manuel ba\u015flatma\nsudo -u aspectify /opt/aspectify/.venv/bin/uvicorn app.main:app --host 0.0.0.0 --port 8000\n</code></pre>"},{"location":"tr/deployment/environment/#2-veritaban-baglant-hatas","title":"2. Veritaban\u0131 Ba\u011flant\u0131 Hatas\u0131","text":"<pre><code># PostgreSQL durumunu kontrol et\nsudo systemctl status postgresql\n\n# Ba\u011flant\u0131y\u0131 test et\npsql -U aspectify -h localhost -d aspectify_prod\n\n# Port kontrol\u00fc\nsudo netstat -tlnp | grep 5432\n</code></pre>"},{"location":"tr/deployment/environment/#3-nginx-hatas","title":"3. Nginx Hatas\u0131","text":"<pre><code># Nginx yap\u0131land\u0131rmas\u0131n\u0131 test et\nsudo nginx -t\n\n# Nginx loglar\u0131\nsudo tail -f /var/log/nginx/error.log\n\n# Servis durumunu kontrol et\nsudo systemctl status nginx\n</code></pre>"},{"location":"tr/deployment/environment/#performans-optimizasyonu","title":"Performans Optimizasyonu","text":"<pre><code># Sistem kaynaklar\u0131n\u0131 izle\nhtop\niotop\nnethogs\n\n# Uygulama performans\u0131n\u0131 izle\ncurl -w \"@curl-format.txt\" -o /dev/null -s http://localhost:8000/health\n</code></pre>"},{"location":"tr/deployment/environment/#en-iyi-uygulamalar","title":"En \u0130yi Uygulamalar","text":""},{"location":"tr/deployment/environment/#guvenlik_1","title":"G\u00fcvenlik","text":"<ol> <li>G\u00fcncellemeler: Sistem ve uygulamalar\u0131 g\u00fcncel tutun</li> <li>G\u00fcvenlik Duvar\u0131: Gereksiz portlar\u0131 kapat\u0131n</li> <li>SSL: HTTPS kullan\u0131n</li> <li>Backup: D\u00fczenli yedekleme yap\u0131n</li> </ol>"},{"location":"tr/deployment/environment/#performans","title":"Performans","text":"<ol> <li>Monitoring: Sistem metriklerini izleyin</li> <li>Logging: Uygun log seviyesi kullan\u0131n</li> <li>Caching: Sonu\u00e7lar\u0131 \u00f6nbelle\u011fe al\u0131n</li> <li>Load Balancing: Y\u00fcksek trafik i\u00e7in load balancer kullan\u0131n</li> </ol>"},{"location":"tr/deployment/environment/#bakm","title":"Bak\u0131m","text":"<ol> <li>Log Rotation: Log dosyalar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcn</li> <li>Disk Space: Disk alan\u0131n\u0131 izleyin</li> <li>Memory: Bellek kullan\u0131m\u0131n\u0131 kontrol edin</li> <li>Updates: D\u00fczenli g\u00fcncelleme yap\u0131n</li> </ol>"},{"location":"tr/deployment/requirements/","title":"Sistem Gereksinimleri","text":"<p>Aspectify'in \u00e7al\u0131\u015fmas\u0131 i\u00e7in gerekli sistem gereksinimleri ve ba\u011f\u0131ml\u0131l\u0131klar\u0131.</p>"},{"location":"tr/deployment/requirements/#minimum-sistem-gereksinimleri","title":"Minimum Sistem Gereksinimleri","text":""},{"location":"tr/deployment/requirements/#isletim-sistemi","title":"\u0130\u015fletim Sistemi","text":"<ul> <li>Windows: Windows 10 veya \u00fczeri</li> <li>macOS: macOS 10.15 (Catalina) veya \u00fczeri</li> <li>Linux: Ubuntu 18.04 LTS veya \u00fczeri</li> </ul>"},{"location":"tr/deployment/requirements/#donanm","title":"Donan\u0131m","text":"Bile\u015fen Minimum \u00d6nerilen CPU 2 \u00e7ekirdek, 2.0 GHz 4 \u00e7ekirdek, 3.0 GHz RAM 4 GB 8 GB Disk 2 GB bo\u015f alan 10 GB bo\u015f alan A\u011f \u0130nternet ba\u011flant\u0131s\u0131 Stabil internet ba\u011flant\u0131s\u0131"},{"location":"tr/deployment/requirements/#yazlm-gereksinimleri","title":"Yaz\u0131l\u0131m Gereksinimleri","text":""},{"location":"tr/deployment/requirements/#python","title":"Python","text":"<ul> <li>Python: 3.8 veya \u00fczeri</li> <li>pip: 20.0 veya \u00fczeri</li> </ul>"},{"location":"tr/deployment/requirements/#python-surumu-kontrolu","title":"Python S\u00fcr\u00fcm\u00fc Kontrol\u00fc","text":"<pre><code>python --version\n# Python 3.8.0 veya \u00fczeri olmal\u0131\n\npip --version\n# pip 20.0 veya \u00fczeri olmal\u0131\n</code></pre>"},{"location":"tr/deployment/requirements/#bagmllklar","title":"Ba\u011f\u0131ml\u0131l\u0131klar","text":""},{"location":"tr/deployment/requirements/#ana-bagmllklar","title":"Ana Ba\u011f\u0131ml\u0131l\u0131klar","text":"<pre><code>fastapi==0.111.0\npydantic==2.11.7\nuvicorn==0.29.0\npython-multipart==0.0.9\ndatabases[postgresql]==0.9.0\npsycopg2-binary==2.9.9\nsqlalchemy==2.0.30\nlangchain\nlangchain-google-genai\npydantic-settings==2.2.1\npinecone-client==3.2.1\npytest==7.4.4\npackaging==24.1\ntransformers==4.42.1\nstreamlit==1.34.0\nsoundfile==0.12.1\nlibrosa==0.10.2.post1\ntorch==2.3.1\nopenai-whisper==20231117\nlangdetect==1.0.9\nmkdocs-material\nmkdocs-i18n\n</code></pre>"},{"location":"tr/deployment/requirements/#aiml-bagmllklar","title":"AI/ML Ba\u011f\u0131ml\u0131l\u0131klar\u0131","text":"Paket S\u00fcr\u00fcm A\u00e7\u0131klama <code>langchain</code> Latest AI framework <code>langchain-google-genai</code> Latest Google Gemini entegrasyonu <code>openai-whisper</code> 20231117 Ses transkripsiyonu <code>torch</code> 2.3.1 PyTorch (Whisper i\u00e7in) <code>transformers</code> 4.42.1 Hugging Face transformers <code>langdetect</code> 1.0.9 Dil tespiti"},{"location":"tr/deployment/requirements/#web-framework-bagmllklar","title":"Web Framework Ba\u011f\u0131ml\u0131l\u0131klar\u0131","text":"Paket S\u00fcr\u00fcm A\u00e7\u0131klama <code>fastapi</code> 0.111.0 Web framework <code>uvicorn</code> 0.29.0 ASGI server <code>pydantic</code> 2.11.7 Veri do\u011frulama <code>python-multipart</code> 0.0.9 Form verisi i\u015fleme"},{"location":"tr/deployment/requirements/#veritaban-bagmllklar","title":"Veritaban\u0131 Ba\u011f\u0131ml\u0131l\u0131klar\u0131","text":"Paket S\u00fcr\u00fcm A\u00e7\u0131klama <code>databases[postgresql]</code> 0.9.0 Veritaban\u0131 ba\u011flant\u0131s\u0131 <code>psycopg2-binary</code> 2.9.9 PostgreSQL adapter <code>sqlalchemy</code> 2.0.30 ORM <code>pinecone-client</code> 3.2.1 Vekt\u00f6r veritaban\u0131"},{"location":"tr/deployment/requirements/#gelistirme-bagmllklar","title":"Geli\u015ftirme Ba\u011f\u0131ml\u0131l\u0131klar\u0131","text":"Paket S\u00fcr\u00fcm A\u00e7\u0131klama <code>pytest</code> 7.4.4 Test framework <code>mkdocs-material</code> Latest Dok\u00fcmantasyon <code>mkdocs-i18n</code> Latest \u00c7ok dilli dok\u00fcmantasyon"},{"location":"tr/deployment/requirements/#kurulum","title":"Kurulum","text":""},{"location":"tr/deployment/requirements/#1-python-sanal-ortam","title":"1. Python Sanal Ortam\u0131","text":"<pre><code># Sanal ortam olu\u015ftur\npython -m venv .venv\n\n# Sanal ortam\u0131 aktifle\u015ftir\n# Windows:\n.venv\\Scripts\\activate\n# macOS/Linux:\nsource .venv/bin/activate\n</code></pre>"},{"location":"tr/deployment/requirements/#2-bagmllklar-yukle","title":"2. Ba\u011f\u0131ml\u0131l\u0131klar\u0131 Y\u00fckle","text":"<pre><code># T\u00fcm ba\u011f\u0131ml\u0131l\u0131klar\u0131 y\u00fckle\npip install -r requirements.txt\n\n# Veya ad\u0131m ad\u0131m\npip install fastapi pydantic uvicorn\npip install langchain langchain-google-genai\npip install openai-whisper torch\npip install databases[postgresql] psycopg2-binary\npip install pytest mkdocs-material\n</code></pre>"},{"location":"tr/deployment/requirements/#3-sistem-bagmllklar","title":"3. Sistem Ba\u011f\u0131ml\u0131l\u0131klar\u0131","text":""},{"location":"tr/deployment/requirements/#windows","title":"Windows","text":"<pre><code># Visual C++ Build Tools (torch i\u00e7in)\n# https://visualstudio.microsoft.com/visual-cpp-build-tools/\n\n# FFmpeg (Whisper i\u00e7in)\n# https://ffmpeg.org/download.html\n</code></pre>"},{"location":"tr/deployment/requirements/#macos","title":"macOS","text":"<pre><code># Homebrew ile\nbrew install ffmpeg\n\n# Xcode Command Line Tools\nxcode-select --install\n</code></pre>"},{"location":"tr/deployment/requirements/#linux-ubuntudebian","title":"Linux (Ubuntu/Debian)","text":"<pre><code># Sistem paketlerini g\u00fcncelle\nsudo apt update\n\n# Gerekli paketleri y\u00fckle\nsudo apt install -y python3-dev python3-pip\nsudo apt install -y ffmpeg\nsudo apt install -y build-essential\nsudo apt install -y libsndfile1\n</code></pre>"},{"location":"tr/deployment/requirements/#api-anahtarlar","title":"API Anahtarlar\u0131","text":""},{"location":"tr/deployment/requirements/#google-api-anahtar","title":"Google API Anahtar\u0131","text":"<ol> <li>Google AI Studio adresini ziyaret edin</li> <li>Yeni bir proje olu\u015fturun</li> <li>API anahtar\u0131 olu\u015fturun</li> <li><code>.env</code> dosyas\u0131na ekleyin:</li> </ol> <pre><code>GOOGLE_API_KEY=your_google_api_key_here\n</code></pre>"},{"location":"tr/deployment/requirements/#pinecone-api-anahtar-istege-bagl","title":"Pinecone API Anahtar\u0131 (\u0130ste\u011fe Ba\u011fl\u0131)","text":"<ol> <li>Pinecone Console adresini ziyaret edin</li> <li>Hesap olu\u015fturun</li> <li>API anahtar\u0131 al\u0131n</li> <li><code>.env</code> dosyas\u0131na ekleyin:</li> </ol> <pre><code>PINECONE_API_KEY=your_pinecone_api_key\nPINECONE_ENVIRONMENT=your_environment\nPINECONE_INDEX_NAME=aspectify-index\n</code></pre>"},{"location":"tr/deployment/requirements/#veritaban-gereksinimleri","title":"Veritaban\u0131 Gereksinimleri","text":""},{"location":"tr/deployment/requirements/#postgresql","title":"PostgreSQL","text":"<ul> <li>S\u00fcr\u00fcm: 12 veya \u00fczeri</li> <li>Port: 5432 (varsay\u0131lan)</li> <li>Kullan\u0131c\u0131: aspectify</li> <li>\u015eifre: g\u00fc\u00e7l\u00fc \u015fifre</li> <li>Veritaban\u0131: aspectify_db</li> </ul>"},{"location":"tr/deployment/requirements/#kurulum_1","title":"Kurulum","text":""},{"location":"tr/deployment/requirements/#windows_1","title":"Windows","text":"<pre><code># PostgreSQL indir ve y\u00fckle\n# https://www.postgresql.org/download/windows/\n</code></pre>"},{"location":"tr/deployment/requirements/#macos_1","title":"macOS","text":"<pre><code># Homebrew ile\nbrew install postgresql\nbrew services start postgresql\n</code></pre>"},{"location":"tr/deployment/requirements/#linux","title":"Linux","text":"<pre><code># Ubuntu/Debian\nsudo apt install postgresql postgresql-contrib\nsudo systemctl start postgresql\nsudo systemctl enable postgresql\n</code></pre>"},{"location":"tr/deployment/requirements/#veritaban-olusturma","title":"Veritaban\u0131 Olu\u015fturma","text":"<pre><code>-- PostgreSQL'e ba\u011flan\npsql -U postgres\n\n-- Kullan\u0131c\u0131 olu\u015ftur\nCREATE USER aspectify WITH PASSWORD 'your_password';\n\n-- Veritaban\u0131 olu\u015ftur\nCREATE DATABASE aspectify_db OWNER aspectify;\n\n-- \u0130zinleri ver\nGRANT ALL PRIVILEGES ON DATABASE aspectify_db TO aspectify;\n</code></pre>"},{"location":"tr/deployment/requirements/#performans-gereksinimleri","title":"Performans Gereksinimleri","text":""},{"location":"tr/deployment/requirements/#cpu-kullanm","title":"CPU Kullan\u0131m\u0131","text":"<ul> <li>Metin Analizi: %20-40 CPU kullan\u0131m\u0131</li> <li>Ses Transkripsiyonu: %60-80 CPU kullan\u0131m\u0131</li> <li>Toplu \u0130\u015flem: %80-100 CPU kullan\u0131m\u0131</li> </ul>"},{"location":"tr/deployment/requirements/#bellek-kullanm","title":"Bellek Kullan\u0131m\u0131","text":"<ul> <li>Temel \u00c7al\u0131\u015fma: 2-4 GB RAM</li> <li>Ses \u0130\u015fleme: 4-8 GB RAM</li> <li>Toplu Analiz: 8-16 GB RAM</li> </ul>"},{"location":"tr/deployment/requirements/#disk-kullanm","title":"Disk Kullan\u0131m\u0131","text":"<ul> <li>Uygulama: 2 GB</li> <li>Model Dosyalar\u0131: 3-5 GB</li> <li>Log Dosyalar\u0131: 100-500 MB</li> <li>Ge\u00e7ici Dosyalar: 1-2 GB</li> </ul>"},{"location":"tr/deployment/requirements/#ag-gereksinimleri","title":"A\u011f Gereksinimleri","text":""},{"location":"tr/deployment/requirements/#gerekli-portlar","title":"Gerekli Portlar","text":"Port Protokol A\u00e7\u0131klama 8000 HTTP FastAPI uygulamas\u0131 5432 TCP PostgreSQL 443 HTTPS API \u00e7a\u011fr\u0131lar\u0131"},{"location":"tr/deployment/requirements/#ds-servisler","title":"D\u0131\u015f Servisler","text":"<ul> <li>Google AI API: <code>generativelanguage.googleapis.com</code></li> <li>Pinecone API: <code>api.pinecone.io</code></li> <li>PyPI: <code>pypi.org</code> (paket y\u00fckleme)</li> </ul>"},{"location":"tr/deployment/requirements/#guvenlik-gereksinimleri","title":"G\u00fcvenlik Gereksinimleri","text":""},{"location":"tr/deployment/requirements/#ssltls","title":"SSL/TLS","text":"<ul> <li>HTTPS: \u00dcretim ortam\u0131nda zorunlu</li> <li>Sertifika: Ge\u00e7erli SSL sertifikas\u0131</li> <li>\u015eifreleme: TLS 1.2 veya \u00fczeri</li> </ul>"},{"location":"tr/deployment/requirements/#guvenlik-duvar","title":"G\u00fcvenlik Duvar\u0131","text":"<pre><code># Gerekli portlar\u0131 a\u00e7\nsudo ufw allow 8000/tcp\nsudo ufw allow 5432/tcp\nsudo ufw enable\n</code></pre>"},{"location":"tr/deployment/requirements/#kullanc-izinleri","title":"Kullan\u0131c\u0131 \u0130zinleri","text":"<pre><code># Uygulama kullan\u0131c\u0131s\u0131 olu\u015ftur\nsudo useradd -m -s /bin/bash aspectify\nsudo usermod -aG docker aspectify\n\n# Dizin izinleri\nsudo chown -R aspectify:aspectify /opt/aspectify\nsudo chmod -R 755 /opt/aspectify\n</code></pre>"},{"location":"tr/deployment/requirements/#sorun-giderme","title":"Sorun Giderme","text":""},{"location":"tr/deployment/requirements/#yaygn-sorunlar","title":"Yayg\u0131n Sorunlar","text":""},{"location":"tr/deployment/requirements/#1-python-surum-uyumsuzlugu","title":"1. Python S\u00fcr\u00fcm Uyumsuzlu\u011fu","text":"<pre><code># Python s\u00fcr\u00fcm\u00fcn\u00fc kontrol et\npython --version\n\n# Gerekirse Python 3.8+ y\u00fckle\n# Windows: https://www.python.org/downloads/\n# macOS: brew install python@3.8\n# Linux: sudo apt install python3.8\n</code></pre>"},{"location":"tr/deployment/requirements/#2-bagmllk-caksmas","title":"2. Ba\u011f\u0131ml\u0131l\u0131k \u00c7ak\u0131\u015fmas\u0131","text":"<pre><code># Sanal ortam\u0131 temizle\ndeactivate\nrm -rf .venv\npython -m venv .venv\nsource .venv/bin/activate\npip install -r requirements.txt\n</code></pre>"},{"location":"tr/deployment/requirements/#3-api-anahtar-hatas","title":"3. API Anahtar\u0131 Hatas\u0131","text":"<pre><code># .env dosyas\u0131n\u0131 kontrol et\ncat .env\n\n# API anahtar\u0131n\u0131 do\u011frula\ncurl -H \"Authorization: Bearer $GOOGLE_API_KEY\" \\\n     https://generativelanguage.googleapis.com/v1/models\n</code></pre>"},{"location":"tr/deployment/requirements/#4-veritaban-baglant-hatas","title":"4. Veritaban\u0131 Ba\u011flant\u0131 Hatas\u0131","text":"<pre><code># PostgreSQL durumunu kontrol et\nsudo systemctl status postgresql\n\n# Ba\u011flant\u0131y\u0131 test et\npsql -h localhost -U aspectify -d aspectify_db\n</code></pre>"},{"location":"tr/deployment/requirements/#log-dosyalar","title":"Log Dosyalar\u0131","text":"<pre><code># Uygulama loglar\u0131\ntail -f logs/app.log\n\n# Sistem loglar\u0131\nsudo journalctl -u aspectify -f\n\n# Veritaban\u0131 loglar\u0131\nsudo tail -f /var/log/postgresql/postgresql-*.log\n</code></pre>"},{"location":"tr/deployment/requirements/#en-iyi-uygulamalar","title":"En \u0130yi Uygulamalar","text":""},{"location":"tr/deployment/requirements/#kurulum_2","title":"Kurulum","text":"<ol> <li>Sanal Ortam: Her zaman sanal ortam kullan\u0131n</li> <li>S\u00fcr\u00fcm Sabitleme: requirements.txt'de s\u00fcr\u00fcmleri sabitleyin</li> <li>G\u00fcvenlik: API anahtarlar\u0131n\u0131 g\u00fcvenli tutun</li> <li>Backup: Veritaban\u0131n\u0131 d\u00fczenli yedekleyin</li> </ol>"},{"location":"tr/deployment/requirements/#performans","title":"Performans","text":"<ol> <li>Kaynak \u0130zleme: CPU, RAM, disk kullan\u0131m\u0131n\u0131 izleyin</li> <li>\u00d6nbellekleme: Sonu\u00e7lar\u0131 \u00f6nbelle\u011fe al\u0131n</li> <li>Load Balancing: Y\u00fcksek trafik i\u00e7in load balancer kullan\u0131n</li> <li>Monitoring: Sistem metriklerini izleyin</li> </ol>"},{"location":"tr/deployment/requirements/#guvenlik","title":"G\u00fcvenlik","text":"<ol> <li>G\u00fcncellemeler: Sistem ve paketleri g\u00fcncel tutun</li> <li>G\u00fcvenlik Duvar\u0131: Gereksiz portlar\u0131 kapat\u0131n</li> <li>SSL: HTTPS kullan\u0131n</li> <li>Backup: D\u00fczenli yedekleme yap\u0131n</li> </ol>"},{"location":"tr/development/logging/","title":"Loglama Sistemi","text":"<p>Aspectify, kapsaml\u0131 bir loglama sistemi kullanarak uygulama davran\u0131\u015f\u0131n\u0131 izler ve hata ay\u0131klama s\u00fcre\u00e7lerini kolayla\u015ft\u0131r\u0131r.</p>"},{"location":"tr/development/logging/#genel-baks","title":"Genel Bak\u0131\u015f","text":"<p>Loglama sistemi \u015fu \u00f6zellikleri sa\u011flar:</p> <ul> <li>Dosya Tabanl\u0131 Loglama: Loglar <code>logs/app.log</code> dosyas\u0131na yaz\u0131l\u0131r</li> <li>Yap\u0131land\u0131r\u0131labilir Seviyeler: Ortam de\u011fi\u015fkeni ile kontrol edilebilir</li> <li>UTF-8 Deste\u011fi: T\u00fcrk\u00e7e karakter deste\u011fi</li> <li>Otomatik Dizin Olu\u015fturma: <code>logs</code> dizini otomatik olu\u015fturulur</li> <li>Timestamp: Her log giri\u015fi zaman damgas\u0131 i\u00e7erir</li> </ul>"},{"location":"tr/development/logging/#yaplandrma","title":"Yap\u0131land\u0131rma","text":""},{"location":"tr/development/logging/#loglama-yaplandrmas","title":"Loglama Yap\u0131land\u0131rmas\u0131","text":"<p><code>app/core/logging_config.py</code> dosyas\u0131nda tan\u0131mlan\u0131r:</p> <pre><code>import logging\nimport os\nfrom app.core.config import settings\n\ndef setup_logging():\n    log_level = settings.LOG_LEVEL.upper()\n\n    # Logs dizini olu\u015ftur\n    os.makedirs(\"logs\", exist_ok=True)\n\n    # Loglama yap\u0131land\u0131rmas\u0131\n    logging.basicConfig(\n        level=log_level,\n        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n        handlers=[\n            logging.FileHandler('logs/app.log', encoding='utf-8')\n        ]\n    )\n\n    logger = logging.getLogger(__name__)\n    logger.info(f\"Logging initialized with level: {log_level}\")\n    return logger\n\nlogger = setup_logging()\n</code></pre>"},{"location":"tr/development/logging/#ortam-degiskenleri","title":"Ortam De\u011fi\u015fkenleri","text":"<p><code>.env</code> dosyas\u0131nda log seviyesini ayarlay\u0131n:</p> <pre><code># Log seviyesi (DEBUG, INFO, WARNING, ERROR, CRITICAL)\nLOG_LEVEL=INFO\n</code></pre>"},{"location":"tr/development/logging/#log-seviyeleri","title":"Log Seviyeleri","text":""},{"location":"tr/development/logging/#seviye-hiyerarsisi","title":"Seviye Hiyerar\u015fisi","text":"<pre><code>CRITICAL (50) &gt; ERROR (40) &gt; WARNING (30) &gt; INFO (20) &gt; DEBUG (10)\n</code></pre>"},{"location":"tr/development/logging/#seviye-acklamalar","title":"Seviye A\u00e7\u0131klamalar\u0131","text":"Seviye A\u00e7\u0131klama Kullan\u0131m <code>DEBUG</code> Hata ay\u0131klama i\u00e7in ayr\u0131nt\u0131l\u0131 bilgi Geli\u015ftirme s\u0131ras\u0131nda <code>INFO</code> Program y\u00fcr\u00fctmesi hakk\u0131nda genel bilgi Normal i\u015flemler <code>WARNING</code> Beklenmeyen bir \u015fey oldu Potansiyel sorunlar <code>ERROR</code> Ciddi bir sorun olu\u015ftu Hata durumlar\u0131 <code>CRITICAL</code> \u00c7ok ciddi bir hata olu\u015ftu Sistem \u00e7\u00f6kmesi"},{"location":"tr/development/logging/#seviye-kullanm","title":"Seviye Kullan\u0131m\u0131","text":"<pre><code>from app.core.logging_config import logger\n\n# Hata ay\u0131klama bilgisi\nlogger.debug(\"De\u011fi\u015fken de\u011feri: %s\", variable_value)\n\n# Genel bilgi\nlogger.info(\"\u0130\u015flem ba\u015flat\u0131ld\u0131: %s\", operation_name)\n\n# Uyar\u0131\nlogger.warning(\"Beklenmeyen durum: %s\", warning_message)\n\n# Hata\nlogger.error(\"\u0130\u015flem ba\u015far\u0131s\u0131z: %s\", error_message)\n\n# Kritik hata\nlogger.critical(\"Sistem \u00e7\u00f6kmesi: %s\", critical_error)\n</code></pre>"},{"location":"tr/development/logging/#log-format","title":"Log Format\u0131","text":""},{"location":"tr/development/logging/#varsaylan-format","title":"Varsay\u0131lan Format","text":"<pre><code>%(asctime)s - %(name)s - %(levelname)s - %(message)s\n</code></pre>"},{"location":"tr/development/logging/#ornek-log-girisleri","title":"\u00d6rnek Log Giri\u015fleri","text":"<pre><code>2024-01-15 10:30:45,123 - app.agents.absa_agent - INFO - ABSA analizi ba\u015flat\u0131ld\u0131\n2024-01-15 10:30:46,456 - app.tools.absa_analyzer - DEBUG - Metin i\u015flendi: \"Bu \u00fcr\u00fcn harika...\"\n2024-01-15 10:30:47,789 - app.agents.absa_agent - INFO - Analiz tamamland\u0131\n2024-01-15 10:30:48,012 - app.agents.absa_agent - ERROR - API hatas\u0131: Invalid API key\n</code></pre>"},{"location":"tr/development/logging/#modul-bazl-loglama","title":"Mod\u00fcl Bazl\u0131 Loglama","text":""},{"location":"tr/development/logging/#logger-olusturma","title":"Logger Olu\u015fturma","text":"<pre><code>import logging\n\n# Mod\u00fcl logger'\u0131 olu\u015ftur\nlogger = logging.getLogger(__name__)\n\n# Kullan\u0131m\nlogger.info(\"Mod\u00fcl ba\u015flat\u0131ld\u0131\")\n</code></pre>"},{"location":"tr/development/logging/#ornek-modul-loglama","title":"\u00d6rnek Mod\u00fcl Loglama","text":"<pre><code># app/agents/absa_agent.py\nimport logging\nfrom app.core.logging_config import logger\n\nasync def run_absa(data: str) -&gt; ABSAResponse:\n    logger.info(f\"ABSA analizi ba\u015flat\u0131ld\u0131: {data[:50]}...\")\n\n    try:\n        # \u0130\u015flem kodlar\u0131\n        logger.debug(\"\u0130\u00e7erik t\u00fcr\u00fc belirlendi: %s\", content_type)\n        logger.debug(\"Dil tespit edildi: %s\", language)\n\n        result = absa_analyzer_tool.invoke({\"text\": text_content, \"language\": language})\n        logger.info(\"Analiz ba\u015far\u0131yla tamamland\u0131\")\n\n        return final_response\n\n    except Exception as e:\n        logger.error(f\"Analiz s\u0131ras\u0131nda hata: {e}\")\n        raise\n</code></pre>"},{"location":"tr/development/logging/#hata-yonetimi","title":"Hata Y\u00f6netimi","text":""},{"location":"tr/development/logging/#exception-loglama","title":"Exception Loglama","text":"<pre><code>import logging\nfrom app.core.logging_config import logger\n\ntry:\n    # Riskli i\u015flem\n    result = risky_operation()\n    logger.info(\"\u0130\u015flem ba\u015far\u0131l\u0131\")\n\nexcept ValueError as e:\n    logger.error(f\"Ge\u00e7ersiz de\u011fer hatas\u0131: {e}\")\n    raise\n\nexcept FileNotFoundError as e:\n    logger.error(f\"Dosya bulunamad\u0131: {e}\")\n    raise\n\nexcept Exception as e:\n    logger.error(f\"Beklenmeyen hata: {e}\", exc_info=True)\n    raise\n</code></pre>"},{"location":"tr/development/logging/#stack-trace-loglama","title":"Stack Trace Loglama","text":"<pre><code>import logging\nfrom app.core.logging_config import logger\n\ntry:\n    # Riskli i\u015flem\n    result = risky_operation()\n\nexcept Exception as e:\n    # Stack trace ile loglama\n    logger.error(f\"Hata olu\u015ftu: {e}\", exc_info=True)\n    raise\n</code></pre>"},{"location":"tr/development/logging/#performans-loglama","title":"Performans Loglama","text":""},{"location":"tr/development/logging/#zaman-olcumu","title":"Zaman \u00d6l\u00e7\u00fcm\u00fc","text":"<pre><code>import time\nimport logging\nfrom app.core.logging_config import logger\n\ndef timed_operation():\n    start_time = time.time()\n\n    try:\n        # \u0130\u015flem kodlar\u0131\n        result = perform_operation()\n\n        elapsed_time = time.time() - start_time\n        logger.info(f\"\u0130\u015flem tamamland\u0131: {elapsed_time:.2f} saniye\")\n\n        return result\n\n    except Exception as e:\n        elapsed_time = time.time() - start_time\n        logger.error(f\"\u0130\u015flem ba\u015far\u0131s\u0131z: {elapsed_time:.2f} saniye, hata: {e}\")\n        raise\n</code></pre>"},{"location":"tr/development/logging/#decorator-ile-zaman-olcumu","title":"Decorator ile Zaman \u00d6l\u00e7\u00fcm\u00fc","text":"<pre><code>import time\nimport logging\nfrom functools import wraps\nfrom app.core.logging_config import logger\n\ndef log_execution_time(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n\n        try:\n            result = func(*args, **kwargs)\n            elapsed_time = time.time() - start_time\n            logger.info(f\"{func.__name__} tamamland\u0131: {elapsed_time:.2f} saniye\")\n            return result\n\n        except Exception as e:\n            elapsed_time = time.time() - start_time\n            logger.error(f\"{func.__name__} ba\u015far\u0131s\u0131z: {elapsed_time:.2f} saniye, hata: {e}\")\n            raise\n\n    return wrapper\n\n# Kullan\u0131m\n@log_execution_time\ndef analyze_text(text: str):\n    # Analiz kodlar\u0131\n    return result\n</code></pre>"},{"location":"tr/development/logging/#log-dosyas-yonetimi","title":"Log Dosyas\u0131 Y\u00f6netimi","text":""},{"location":"tr/development/logging/#log-rotation","title":"Log Rotation","text":"<pre><code>import logging\nfrom logging.handlers import RotatingFileHandler\nfrom app.core.config import settings\n\ndef setup_logging_with_rotation():\n    log_level = settings.LOG_LEVEL.upper()\n\n    # Logs dizini olu\u015ftur\n    os.makedirs(\"logs\", exist_ok=True)\n\n    # Rotating file handler\n    handler = RotatingFileHandler(\n        'logs/app.log',\n        maxBytes=10*1024*1024,  # 10MB\n        backupCount=5\n    )\n\n    # Formatter\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    )\n    handler.setFormatter(formatter)\n\n    # Logger yap\u0131land\u0131rmas\u0131\n    logger = logging.getLogger()\n    logger.setLevel(log_level)\n    logger.addHandler(handler)\n\n    return logger\n</code></pre>"},{"location":"tr/development/logging/#log-temizleme","title":"Log Temizleme","text":"<pre><code>import os\nimport glob\nfrom datetime import datetime, timedelta\n\ndef cleanup_old_logs(days=30):\n    \"\"\"Eski log dosyalar\u0131n\u0131 temizle\"\"\"\n    cutoff_date = datetime.now() - timedelta(days=days)\n\n    log_files = glob.glob(\"logs/*.log*\")\n\n    for log_file in log_files:\n        file_time = datetime.fromtimestamp(os.path.getmtime(log_file))\n\n        if file_time &lt; cutoff_date:\n            os.remove(log_file)\n            logger.info(f\"Eski log dosyas\u0131 silindi: {log_file}\")\n</code></pre>"},{"location":"tr/development/logging/#guvenlik","title":"G\u00fcvenlik","text":""},{"location":"tr/development/logging/#hassas-bilgi-maskeleme","title":"Hassas Bilgi Maskeleme","text":"<pre><code>import logging\nfrom app.core.logging_config import logger\n\ndef mask_sensitive_data(data: str) -&gt; str:\n    \"\"\"Hassas bilgileri maskele\"\"\"\n    # API anahtarlar\u0131n\u0131 maskele\n    if \"api_key\" in data.lower():\n        return data.replace(data, \"***MASKED***\")\n\n    # Email adreslerini maskele\n    import re\n    email_pattern = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\n    return re.sub(email_pattern, \"***@***.***\", data)\n\n# Kullan\u0131m\nsensitive_data = \"API key: sk-1234567890abcdef\"\nlogger.info(f\"API \u00e7a\u011fr\u0131s\u0131: {mask_sensitive_data(sensitive_data)}\")\n</code></pre>"},{"location":"tr/development/logging/#log-guvenligi","title":"Log G\u00fcvenli\u011fi","text":"<pre><code># \u274c Yapma - Hassas bilgiyi loglama\nlogger.info(f\"API anahtar\u0131: {api_key}\")\n\n# \u2705 Yap - Hassas bilgiyi maskele\nlogger.info(f\"API \u00e7a\u011fr\u0131s\u0131 yap\u0131ld\u0131: {endpoint}\")\n\n# \u274c Yapma - Kullan\u0131c\u0131 \u015fifrelerini loglama\nlogger.debug(f\"Kullan\u0131c\u0131 giri\u015fi: {username}, \u015fifre: {password}\")\n\n# \u2705 Yap - Sadece gerekli bilgiyi logla\nlogger.info(f\"Kullan\u0131c\u0131 giri\u015fi: {username}\")\n</code></pre>"},{"location":"tr/development/logging/#test","title":"Test","text":""},{"location":"tr/development/logging/#log-testleri","title":"Log Testleri","text":"<pre><code>import pytest\nimport logging\nfrom app.core.logging_config import logger\n\ndef test_logging_setup():\n    \"\"\"Loglama yap\u0131land\u0131rmas\u0131n\u0131 test et\"\"\"\n    assert logger.level == logging.INFO\n    assert len(logger.handlers) &gt; 0\n\ndef test_log_file_creation():\n    \"\"\"Log dosyas\u0131n\u0131n olu\u015fturuldu\u011funu test et\"\"\"\n    import os\n    assert os.path.exists(\"logs/app.log\")\n\ndef test_log_content():\n    \"\"\"Log i\u00e7eri\u011fini test et\"\"\"\n    logger.info(\"Test mesaj\u0131\")\n\n    with open(\"logs/app.log\", \"r\", encoding=\"utf-8\") as f:\n        content = f.read()\n        assert \"Test mesaj\u0131\" in content\n</code></pre>"},{"location":"tr/development/logging/#en-iyi-uygulamalar","title":"En \u0130yi Uygulamalar","text":""},{"location":"tr/development/logging/#loglama-kurallar","title":"Loglama Kurallar\u0131","text":"<ol> <li>Uygun Seviye: Do\u011fru log seviyesini kullan\u0131n</li> <li>A\u00e7\u0131klay\u0131c\u0131 Mesajlar: Net ve anla\u015f\u0131l\u0131r mesajlar yaz\u0131n</li> <li>Structured Logging: Yap\u0131land\u0131r\u0131lm\u0131\u015f log format\u0131 kullan\u0131n</li> <li>Performance: Loglama performans\u0131 etkilememeli</li> </ol>"},{"location":"tr/development/logging/#guvenlik_1","title":"G\u00fcvenlik","text":"<ol> <li>Hassas Bilgi: Hassas bilgileri loglamay\u0131n</li> <li>Maskeleme: Gerekli durumlarda bilgileri maskeleyin</li> <li>Eri\u015fim Kontrol\u00fc: Log dosyalar\u0131na eri\u015fimi s\u0131n\u0131rlay\u0131n</li> <li>Retention: Log dosyalar\u0131n\u0131 uygun s\u00fcre saklay\u0131n</li> </ol>"},{"location":"tr/development/logging/#performans","title":"Performans","text":"<ol> <li>Asenkron Loglama: Uzun s\u00fcren i\u015flemler i\u00e7in asenkron loglama</li> <li>Log Rotation: Log dosyalar\u0131n\u0131 d\u00f6nd\u00fcr\u00fcn</li> <li>Level Control: \u00dcretimde uygun log seviyesi kullan\u0131n</li> <li>Monitoring: Log performans\u0131n\u0131 izleyin</li> </ol>"},{"location":"tr/getting-started/configuration/","title":"Yap\u0131land\u0131rma","text":"<p>Aspectify, <code>app.core.config</code> mod\u00fcl\u00fc arac\u0131l\u0131\u011f\u0131yla merkezi bir yap\u0131land\u0131rma sistemi kullan\u0131r.</p>"},{"location":"tr/getting-started/configuration/#yaplandrma-dosyas","title":"Yap\u0131land\u0131rma Dosyas\u0131","text":"<p>Ana yap\u0131land\u0131rma <code>app/core/config.py</code> dosyas\u0131nda tan\u0131mlan\u0131r:</p> <pre><code>from pydantic_settings import BaseSettings, SettingsConfigDict\nfrom pydantic import SecretStr\n\nclass Settings(BaseSettings):\n    model_config = SettingsConfigDict(env_file=\".env\", extra=\"ignore\")\n\n    PROJECT_NAME: str = \"Aspectify\"\n    PROJECT_VERSION: str = \"1.0.0\"\n    LOG_LEVEL: str = \"INFO\"\n    GOOGLE_API_KEY: SecretStr | None = None\n    GEMINI_1_5_FLASH_MODEL: str = \"gemini-1.5-flash\"\n</code></pre>"},{"location":"tr/getting-started/configuration/#ortam-degiskenleri","title":"Ortam De\u011fi\u015fkenleri","text":"<p>Proje k\u00f6k dizininde <code>.env</code> dosyas\u0131 olu\u015fturun:</p>"},{"location":"tr/getting-started/configuration/#gerekli-degiskenler","title":"Gerekli De\u011fi\u015fkenler","text":"<pre><code># Google API Anahtar\u0131 (Gerekli)\nGOOGLE_API_KEY=your_google_api_key_here\n</code></pre>"},{"location":"tr/getting-started/configuration/#istege-bagl-degiskenler","title":"\u0130ste\u011fe Ba\u011fl\u0131 De\u011fi\u015fkenler","text":"<pre><code># Uygulama Ayarlar\u0131\nPROJECT_NAME=Aspectify\nPROJECT_VERSION=1.0.0\nLOG_LEVEL=INFO\n\n# AI Model Yap\u0131land\u0131rmas\u0131\nGEMINI_1_5_FLASH_MODEL=gemini-1.5-flash\n</code></pre>"},{"location":"tr/getting-started/configuration/#yaplandrma-secenekleri","title":"Yap\u0131land\u0131rma Se\u00e7enekleri","text":""},{"location":"tr/getting-started/configuration/#log-seviyeleri","title":"Log Seviyeleri","text":"<p>Mevcut log seviyeleri (ayr\u0131nt\u0131 s\u0131ras\u0131na g\u00f6re):</p> <ul> <li><code>DEBUG</code>: Hata ay\u0131klama i\u00e7in ayr\u0131nt\u0131l\u0131 bilgi</li> <li><code>INFO</code>: Program y\u00fcr\u00fctmesi hakk\u0131nda genel bilgi</li> <li><code>WARNING</code>: Beklenmeyen bir \u015fey oldu</li> <li><code>ERROR</code>: Ciddi bir sorun olu\u015ftu</li> <li><code>CRITICAL</code>: \u00c7ok ciddi bir hata olu\u015ftu</li> </ul>"},{"location":"tr/getting-started/configuration/#ai-modelleri","title":"AI Modelleri","text":"<p>\u015eu anda desteklenen Gemini modelleri:</p> <ul> <li><code>gemini-1.5-flash</code>: H\u0131zl\u0131 ve verimli model</li> <li><code>gemini-1.5-pro</code>: Daha yetenekli ama yava\u015f model</li> </ul>"},{"location":"tr/getting-started/configuration/#yaplandrmay-kullanma","title":"Yap\u0131land\u0131rmay\u0131 Kullanma","text":"<p>Kodunuzda yap\u0131land\u0131rma ayarlar\u0131na eri\u015fin:</p> <pre><code>from app.core.config import settings\n\n# Ayarlara eri\u015f\nprint(f\"Proje: {settings.PROJECT_NAME}\")\nprint(f\"S\u00fcr\u00fcm: {settings.PROJECT_VERSION}\")\nprint(f\"Log Seviyesi: {settings.LOG_LEVEL}\")\n\n# Gizli de\u011ferlere eri\u015f\nif settings.GOOGLE_API_KEY:\n    api_key = settings.GOOGLE_API_KEY.get_secret_value()\n</code></pre>"},{"location":"tr/getting-started/configuration/#guvenlik-en-iyi-uygulamalar","title":"G\u00fcvenlik En \u0130yi Uygulamalar\u0131","text":"<ol> <li>Asla <code>.env</code> dosyalar\u0131n\u0131 versiyon kontrol\u00fcne commit etmeyin</li> <li>G\u00fc\u00e7l\u00fc API anahtarlar\u0131 kullan\u0131n ve d\u00fczenli olarak de\u011fi\u015ftirin</li> <li>API anahtar\u0131 izinlerini s\u0131n\u0131rlay\u0131n sadece gerekli olanlara</li> <li>Farkl\u0131 da\u011f\u0131t\u0131mlar i\u00e7in ortam-spesifik yap\u0131land\u0131rmalar kullan\u0131n</li> </ol>"},{"location":"tr/getting-started/configuration/#ortam-spesifik-yaplandrma","title":"Ortam-Spesifik Yap\u0131land\u0131rma","text":"<p>Farkl\u0131 ortamlar i\u00e7in farkl\u0131 <code>.env</code> dosyalar\u0131 kullanabilirsiniz:</p> <pre><code># Geli\u015ftirme\n.env.development\n\n# \u00dcretim\n.env.production\n\n# Test\n.env.testing\n</code></pre>"},{"location":"tr/getting-started/configuration/#dogrulama","title":"Do\u011frulama","text":"<p>Yap\u0131land\u0131rma sistemi do\u011frulama i\u00e7in Pydantic kullan\u0131r:</p> <ul> <li>T\u00fcr kontrol\u00fc: Do\u011fru veri t\u00fcrlerini sa\u011flar</li> <li>Gerekli alanlar: Gerekli de\u011fi\u015fkenlerin mevcut oldu\u011funu do\u011frular</li> <li>Varsay\u0131lan de\u011ferler: Makul varsay\u0131lanlar sa\u011flar</li> <li>Gizli i\u015fleme: Hassas bilgileri g\u00fcvenli \u015fekilde i\u015fler</li> </ul>"},{"location":"tr/getting-started/configuration/#sorun-giderme","title":"Sorun Giderme","text":""},{"location":"tr/getting-started/configuration/#yaplandrma-yuklenmiyor","title":"Yap\u0131land\u0131rma Y\u00fcklenmiyor","text":"<ol> <li><code>.env</code> dosyas\u0131n\u0131n proje k\u00f6k dizininde oldu\u011funu kontrol edin</li> <li>Dosya izinlerini do\u011frulay\u0131n</li> <li><code>.env</code> dosyas\u0131nda s\u00f6zdizimi hatas\u0131 olmad\u0131\u011f\u0131ndan emin olun</li> </ol>"},{"location":"tr/getting-started/configuration/#api-anahtar-sorunlar","title":"API Anahtar\u0131 Sorunlar\u0131","text":"<ol> <li>Anahtar\u0131n do\u011fru kopyaland\u0131\u011f\u0131n\u0131 do\u011frulay\u0131n (ekstra bo\u015fluk yok)</li> <li>Anahtar\u0131n uygun izinlere sahip oldu\u011funu kontrol edin</li> <li>Anahtar\u0131n s\u00fcresi dolmam\u0131\u015f oldu\u011fundan emin olun</li> </ol>"},{"location":"tr/getting-started/configuration/#model-yaplandrmas","title":"Model Yap\u0131land\u0131rmas\u0131","text":"<ol> <li>Model ad\u0131n\u0131n do\u011fru oldu\u011funu do\u011frulay\u0131n</li> <li>Modelin b\u00f6lgenizde mevcut oldu\u011funu kontrol edin</li> <li>API anahtar\u0131n\u0131n modele eri\u015fimi oldu\u011fundan emin olun</li> </ol>"},{"location":"tr/getting-started/installation/","title":"Kurulum","text":"<p>Bu rehber, Aspectify geli\u015ftirme ortam\u0131n\u0131 kurman\u0131za yard\u0131mc\u0131 olacak.</p>"},{"location":"tr/getting-started/installation/#on-gereksinimler","title":"\u00d6n Gereksinimler","text":"<ul> <li>Python 3.8 veya \u00fczeri</li> <li>pip (Python paket y\u00fckleyicisi)</li> <li>Git</li> </ul>"},{"location":"tr/getting-started/installation/#adm-1-depoyu-klonlayn","title":"Ad\u0131m 1: Depoyu Klonlay\u0131n","text":"<pre><code>git clone https://github.com/your-username/aspectify.git\ncd aspectify\n</code></pre>"},{"location":"tr/getting-started/installation/#adm-2-sanal-ortam-olusturun","title":"Ad\u0131m 2: Sanal Ortam Olu\u015fturun","text":"<pre><code># Sanal ortam olu\u015ftur\npython -m venv .venv\n\n# Sanal ortam\u0131 aktifle\u015ftir\n# Windows'ta:\n.venv\\Scripts\\activate\n# macOS/Linux'ta:\nsource .venv/bin/activate\n</code></pre>"},{"location":"tr/getting-started/installation/#adm-3-bagmllklar-yukleyin","title":"Ad\u0131m 3: Ba\u011f\u0131ml\u0131l\u0131klar\u0131 Y\u00fckleyin","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"tr/getting-started/installation/#adm-4-ortam-yaplandrmas","title":"Ad\u0131m 4: Ortam Yap\u0131land\u0131rmas\u0131","text":"<p>Proje k\u00f6k dizininde <code>.env</code> dosyas\u0131 olu\u015fturun:</p> <pre><code># Google API Yap\u0131land\u0131rmas\u0131\nGOOGLE_API_KEY=your_google_api_key_here\n\n# Uygulama Ayarlar\u0131\nLOG_LEVEL=INFO\nPROJECT_NAME=Aspectify\nPROJECT_VERSION=1.0.0\n</code></pre>"},{"location":"tr/getting-started/installation/#adm-5-kurulumu-dogrulayn","title":"Ad\u0131m 5: Kurulumu Do\u011frulay\u0131n","text":"<p>Test beti\u011fini \u00e7al\u0131\u015ft\u0131rarak her \u015feyin \u00e7al\u0131\u015ft\u0131\u011f\u0131n\u0131 do\u011frulay\u0131n:</p> <pre><code>python main.py\n</code></pre> <p>\u015euna benzer bir \u00e7\u0131kt\u0131 g\u00f6rmelisiniz:</p> <pre><code>--------------------------------------------------\nTest verileri okunuyor ve duygu analizi yap\u0131l\u0131yor...\n--------------------------------------------------\n\nAnaliz Edilen Metin: Yeni ald\u0131\u011f\u0131m telefonun kameras\u0131 harika foto\u011fraflar \u00e7ekiyor ama bataryas\u0131 bir g\u00fcn\u00fc zor \u00e7\u0131kar\u0131yor.\nBeklenen Duygu: neutral\nAjan Sonucu (Polarite): neutral\nAjan Sonucu (Skor): 0.5\nAjan Sonucu (Aspektler): [AspectAnalysisResponse(aspect='kamera', sentiment='positive', score=0.98), AspectAnalysisResponse(aspect='batarya', sentiment='negative', score=0.99)]\n</code></pre>"},{"location":"tr/getting-started/installation/#sorun-giderme","title":"Sorun Giderme","text":""},{"location":"tr/getting-started/installation/#yaygn-sorunlar","title":"Yayg\u0131n Sorunlar","text":"<ol> <li>ModuleNotFoundError: Sanal ortam\u0131 aktifle\u015ftirdi\u011finizden emin olun</li> <li>API Key Hatas\u0131: <code>.env</code> dosyas\u0131nda Google API anahtar\u0131n\u0131z\u0131n do\u011fru ayarland\u0131\u011f\u0131n\u0131 kontrol edin</li> <li>\u0130zin Hatalar\u0131: Proje dizininde yazma izinleriniz oldu\u011fundan emin olun</li> </ol>"},{"location":"tr/getting-started/installation/#google-api-anahtar-alma","title":"Google API Anahtar\u0131 Alma","text":"<ol> <li>Google AI Studio adresini ziyaret edin</li> <li>Yeni bir proje olu\u015fturun veya mevcut birini se\u00e7in</li> <li>API anahtar\u0131 olu\u015fturun</li> <li>Anahtar\u0131 <code>.env</code> dosyan\u0131za kopyalay\u0131n</li> </ol>"},{"location":"tr/getting-started/installation/#sonraki-admlar","title":"Sonraki Ad\u0131mlar","text":"<ul> <li>Yap\u0131land\u0131rma - Uygulama yap\u0131land\u0131rmas\u0131 hakk\u0131nda bilgi edinin</li> <li>H\u0131zl\u0131 Ba\u015flang\u0131\u00e7 - \u0130lk analizinizi \u00e7al\u0131\u015ft\u0131r\u0131n</li> </ul>"},{"location":"tr/getting-started/quick-start/","title":"H\u0131zl\u0131 Ba\u015flang\u0131\u00e7","text":"<p>Bu rehber, Aspectify ile ilk duygu analizinizi yapman\u0131za yard\u0131mc\u0131 olacak.</p>"},{"location":"tr/getting-started/quick-start/#temel-kullanm","title":"Temel Kullan\u0131m","text":""},{"location":"tr/getting-started/quick-start/#1-metin-analizi","title":"1. Metin Analizi","text":"<p>En basit kullan\u0131m \u015fekli:</p> <pre><code>import asyncio\nfrom app.agents.absa_agent import run_absa\n\nasync def main():\n    text = \"Bu telefonun kameras\u0131 harika ama bataryas\u0131 \u00e7ok k\u00f6t\u00fc.\"\n    result = await run_absa(text)\n\n    print(f\"Genel Duygu: {result.polarity}\")\n    print(f\"G\u00fcven Skoru: {result.score}\")\n    print(\"Aspektler:\")\n    for aspect in result.aspects:\n        print(f\"  - {aspect.aspect}: {aspect.sentiment} ({aspect.score})\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"tr/getting-started/quick-start/#2-ses-dosyas-analizi","title":"2. Ses Dosyas\u0131 Analizi","text":"<p>Ses dosyalar\u0131n\u0131 da analiz edebilirsiniz:</p> <pre><code>import asyncio\nfrom app.agents.absa_agent import run_absa\n\nasync def main():\n    audio_path = \"path/to/your/audio.wav\"\n    result = await run_absa(audio_path)\n\n    print(f\"Transkripsiyon: {result.text}\")\n    print(f\"Genel Duygu: {result.polarity}\")\n    print(f\"G\u00fcven Skoru: {result.score}\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"tr/getting-started/quick-start/#desteklenen-formatlar","title":"Desteklenen Formatlar","text":""},{"location":"tr/getting-started/quick-start/#metin-girisi","title":"Metin Giri\u015fi","text":"<ul> <li>Do\u011frudan metin string'i</li> <li>Herhangi bir dilde metin</li> </ul>"},{"location":"tr/getting-started/quick-start/#ses-dosyalar","title":"Ses Dosyalar\u0131","text":"<ul> <li><code>.wav</code> - WAV format\u0131</li> <li><code>.mp3</code> - MP3 format\u0131</li> <li><code>.m4a</code> - M4A format\u0131</li> <li><code>.flac</code> - FLAC format\u0131</li> </ul>"},{"location":"tr/getting-started/quick-start/#ornek-ckt","title":"\u00d6rnek \u00c7\u0131kt\u0131","text":"<pre><code>{\n  \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"polarity\": \"neutral\",\n  \"score\": 0.5,\n  \"aspects\": [\n    {\n      \"aspect\": \"kamera\",\n      \"sentiment\": \"positive\",\n      \"score\": 0.95,\n      \"quote\": \"kamera harika\"\n    },\n    {\n      \"aspect\": \"batarya\",\n      \"sentiment\": \"negative\",\n      \"score\": 0.98,\n      \"quote\": \"bataryas\u0131 \u00e7ok k\u00f6t\u00fc\"\n    }\n  ],\n  \"message\": \"ABSA completed successfully.\",\n  \"text\": \"Bu telefonun kameras\u0131 harika ama bataryas\u0131 \u00e7ok k\u00f6t\u00fc.\"\n}\n</code></pre>"},{"location":"tr/getting-started/quick-start/#duygu-turleri","title":"Duygu T\u00fcrleri","text":""},{"location":"tr/getting-started/quick-start/#polarity-genel-duygu","title":"Polarity (Genel Duygu)","text":"<ul> <li><code>positive</code>: Pozitif duygu</li> <li><code>negative</code>: Negatif duygu</li> <li><code>neutral</code>: N\u00f6tr duygu</li> </ul>"},{"location":"tr/getting-started/quick-start/#sentiment-aspekt-duygusu","title":"Sentiment (Aspekt Duygusu)","text":"<ul> <li><code>positive</code>: Pozitif</li> <li><code>negative</code>: Negatif</li> <li><code>neutral</code>: N\u00f6tr</li> </ul>"},{"location":"tr/getting-started/quick-start/#guven-skorlar","title":"G\u00fcven Skorlar\u0131","text":"<p>Skorlar 0.0 ile 1.0 aras\u0131nda de\u011fi\u015fir:</p> <ul> <li>0.0 - 0.3: D\u00fc\u015f\u00fck g\u00fcven</li> <li>0.3 - 0.7: Orta g\u00fcven</li> <li>0.7 - 1.0: Y\u00fcksek g\u00fcven</li> </ul>"},{"location":"tr/getting-started/quick-start/#hzl-test","title":"H\u0131zl\u0131 Test","text":"<p>Test verilerinizi kullanarak h\u0131zl\u0131 bir test yap\u0131n:</p> <pre><code>python main.py\n</code></pre> <p>Bu komut <code>test_data/text/test_texts.jsonl</code> dosyas\u0131ndaki \u00f6rnek metinleri analiz eder.</p>"},{"location":"tr/getting-started/quick-start/#gelismis-kullanm","title":"Geli\u015fmi\u015f Kullan\u0131m","text":""},{"location":"tr/getting-started/quick-start/#ozel-dil-belirtme","title":"\u00d6zel Dil Belirtme","text":"<pre><code>from app.tools.absa_analyzer import absa_analyzer_tool\n\n# T\u00fcrk\u00e7e metin i\u00e7in\nresult = absa_analyzer_tool.invoke({\n    \"text\": \"Bu \u00fcr\u00fcn ger\u00e7ekten harika!\",\n    \"language\": \"tr\"\n})\n\n# \u0130ngilizce metin i\u00e7in\nresult = absa_analyzer_tool.invoke({\n    \"text\": \"This product is amazing!\",\n    \"language\": \"en\"\n})\n</code></pre>"},{"location":"tr/getting-started/quick-start/#toplu-analiz","title":"Toplu Analiz","text":"<pre><code>import asyncio\nfrom app.agents.absa_agent import run_absa\n\nasync def analyze_multiple_texts(texts):\n    results = []\n    for text in texts:\n        result = await run_absa(text)\n        results.append(result)\n    return results\n\n# Kullan\u0131m\ntexts = [\n    \"Bu telefon harika!\",\n    \"Kamera kalitesi k\u00f6t\u00fc.\",\n    \"Fiyat uygun ama performans yetersiz.\"\n]\n\nresults = asyncio.run(analyze_multiple_texts(texts))\n</code></pre>"},{"location":"tr/getting-started/quick-start/#sorun-giderme","title":"Sorun Giderme","text":""},{"location":"tr/getting-started/quick-start/#yaygn-hatalar","title":"Yayg\u0131n Hatalar","text":"<ol> <li>API Key Hatas\u0131: <code>.env</code> dosyas\u0131nda Google API anahtar\u0131n\u0131z\u0131 kontrol edin</li> <li>Bo\u015f Metin: Analiz edilecek metin bo\u015f olamaz</li> <li>Desteklenmeyen Format: Ses dosyas\u0131 format\u0131n\u0131 kontrol edin</li> </ol>"},{"location":"tr/getting-started/quick-start/#performans-ipuclar","title":"Performans \u0130pu\u00e7lar\u0131","text":"<ol> <li>Toplu \u0130\u015flem: Birden fazla metni ayn\u0131 anda i\u015fleyin</li> <li>\u00d6nbellekleme: Sonu\u00e7lar\u0131 \u00f6nbelle\u011fe al\u0131n</li> <li>Asenkron Kullan\u0131m: <code>async/await</code> kullan\u0131n</li> </ol>"},{"location":"tr/getting-started/quick-start/#sonraki-admlar","title":"Sonraki Ad\u0131mlar","text":"<ul> <li>API Referans\u0131 - Detayl\u0131 API dok\u00fcmantasyonu</li> <li>Mimari - Sistem mimarisi hakk\u0131nda bilgi</li> <li>Geli\u015ftirme - Loglama ve hata ay\u0131klama</li> </ul>"}]}